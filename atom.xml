<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知与南_南风知我意,吹梦到西周</title>
  
  <subtitle>叩首问路,码梦为生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://inner.ink/"/>
  <updated>2019-05-10T12:53:52.358Z</updated>
  <id>https://inner.ink/</id>
  
  <author>
    <name>知与南</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用树莓派构建一台服务器，永久运行网站</title>
    <link href="https://inner.ink/2019/05/10/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%9E%84%E5%BB%BA%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%B0%B8%E4%B9%85%E8%BF%90%E8%A1%8C%E7%BD%91%E7%AB%99/"/>
    <id>https://inner.ink/2019/05/10/使用树莓派构建一台服务器，永久运行网站/</id>
    <published>2019-05-10T11:22:44.000Z</published>
    <updated>2019-05-10T12:53:52.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>由于本人在这段时候，看到了一个叫做树莓派的东东，初步了解之后觉得很有意思，于是想把整个过程记录下来。</p><h1 id="二、树莓派是什么？"><a href="#二、树莓派是什么？" class="headerlink" title="二、树莓派是什么？"></a>二、树莓派是什么？</h1><p>Raspberry Pi(中文名为<strong>树莓派</strong>,简写为RPi，(或者RasPi / RPI) 是为学习计算机编程教育而设计)，只有信用卡大小的微型电脑，其系统基于Linux。随着Windows 10 IoT的发布，我们也将可以用上运行Windows的树莓派。<br>自问世以来，受众多计算机发烧友和创客的追捧，曾经一“派”难求。别看其外表“娇小”，内“心”却很强大，视频、音频等功能通通皆有，可谓是<strong>麻雀虽小，五脏俱全</strong>。</p><h2 id="1-用我的话理解"><a href="#1-用我的话理解" class="headerlink" title="1.用我的话理解"></a>1.用我的话理解</h2><p>用我的话理解就是树莓派就是一台主机，你可以外接显示器，键盘鼠标，u盘等等外设，因为它体积很小，而且又有很多串口和外接的口，可以直接调用很多底层硬件。</p><h2 id="2-市面上的型号"><a href="#2-市面上的型号" class="headerlink" title="2.市面上的型号"></a>2.市面上的型号</h2><p>市面上大多是<strong>3代B+型</strong>，淘宝一搜树莓派一大堆都是，价钱纯主板（不要任何外设）在230+左右，有点小贵，超过我的预算，所以我继续寻找廉价的，终于让我发现了一款100+的树莓派。</p><h2 id="3-树莓派zero-w"><a href="#3-树莓派zero-w" class="headerlink" title="3.树莓派zero w"></a>3.树莓派zero w</h2><p>树莓派zero w是一款mini的树莓派，体质只有3b+的1/3。实际到手后，你会发现它真的超级小，超级可爱。以下是我的实物图，你可以看看大小到底有多mini。</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/1.jpg" alt=""></p><p>你可以看到，最上面是一根普通的黑色签字笔，接下来是一个即插即用型的外接wifi网卡，然后是一个USB读卡器，最底下的就是我们今天的主角zero w。它真的超级小，有木有。<strong>真的是完美的诠释了那句“麻雀虽小，五脏俱全”的话。</strong></p><p>zero w这款树莓派的主要参数如下：</p><ul><li>BCM2835处理器，1GHz主频，512MB RAM</li><li>BCM43438 WiFi / BT芯片</li><li>micro-USB电源接口</li><li>micro-USB OTG接口</li><li>miniHDMI端口</li><li>复合视频和重置扩展接口</li><li>脆弱的CSI摄像头接口</li><li>micro-SD卡座，存放操作系统</li><li>40-pin GPIO扩展接口</li><li>尺寸：65mm*30mm</li></ul><p>你别看它的cpu只有1核，内存只有512MB，就觉得它可能什么都做不了，但是实际上它的性能还是很好的，用于跑一个网站真的是小case。</p><h2 id="4-更多树莓派"><a href="#4-更多树莓派" class="headerlink" title="4.更多树莓派"></a>4.更多树莓派</h2><p>关于更多树莓派型号或者使用教程你可以去<a href="http://shumeipai.nxez.com/" target="_blank" rel="noopener">树莓派实验室</a>这个网站，上面有丰富的资源。</p><h1 id="三、树莓派zero-w安装系统"><a href="#三、树莓派zero-w安装系统" class="headerlink" title="三、树莓派zero w安装系统"></a>三、树莓派zero w安装系统</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p>你可能提前需要准备的东西如下:</p><ul><li>16GB or 32GB 的SanDisk内存卡（注意是以前那种放在手机上，很小的哦）</li><li>一根最普通不过的usb安卓数据线（not type-c）</li><li>u盘格式化工具（推荐使用 SDFormatter）</li><li>系统烧写工具（Win32DiskImager）</li><li>树莓派系统（可以去官网下载）</li></ul><p>我使用的是<strong>Raspbian Stretch Lite</strong>这个系统镜像，这个系统是官方制作的，lite是无桌面版的，只有黑漆漆的控制台，优点是体积小，省性能和内存。</p><p>名字带有desktop的是有桌面ui的，对不熟悉liunx系统的朋友可能更友好，但是体积很大，占用的性能也会更高。</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/2.png" alt=""></p><h2 id="2-第一步下载系统镜像"><a href="#2-第一步下载系统镜像" class="headerlink" title="2.第一步下载系统镜像"></a>2.第一步下载系统镜像</h2><p>下载好你需要的系统镜像后，如下图</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/3.png" alt=""></p><p>一开始只有一个zip的压缩包，大小大概360MB左右，你需要把它解压，得到上图的文件夹</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/4.png" alt=""></p><p>然后进入文件夹可以看到一个img的镜像，大小为1.7GB左右</p><blockquote><p>ps：这个官方的Raspbian镜像，如果是其他第三方的镜像，可能下载后的压缩包解压后不是img镜像，这种情况请另行百度解决</p></blockquote><h2 id="3-使用Win32DiskImager往内存卡中写入镜像"><a href="#3-使用Win32DiskImager往内存卡中写入镜像" class="headerlink" title="3.使用Win32DiskImager往内存卡中写入镜像"></a>3.使用Win32DiskImager往内存卡中写入镜像</h2><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/5.png" alt=""></p><p>把内存卡插入读卡器后，插入电脑。<br>打开Win32DiskImager软件后，选择img镜像，设备选择你的U盘，然后点击写入就可以了，写入完成后会弹出成功的提示框。</p><blockquote><p>ps: 我上图没有选择设备，因为的没插入读卡器，仅仅是示范而已</p></blockquote><h2 id="4-修改boot分区的文件"><a href="#4-修改boot分区的文件" class="headerlink" title="4.修改boot分区的文件"></a>4.修改boot分区的文件</h2><p>先别急着拔出读卡器，此时，我们电脑可以看到u盘中只有一个名为boot的分区，大小可能只有40MB左右，不要着急，因为window不识别内存卡中liunx系统的其他分区。</p><h3 id="4-1新建ssh文件"><a href="#4-1新建ssh文件" class="headerlink" title="4.1新建ssh文件"></a>4.1新建ssh文件</h3><p>因为我们的zero w有一个mini hdmi的接口，但是我不需要屏幕，所以需要使用ssh连接到zero w中的系统，所以需要在第一次开机就能开启ssh功能。<br>我们进入boot分区内，然后<strong>新建</strong>一个名为<strong>ssh</strong>的文件，<strong>注意不要后缀名！！！！也不要往里面写任何东西！！</strong></p><h3 id="4-2新建wpa-supplicant-conf文件"><a href="#4-2新建wpa-supplicant-conf文件" class="headerlink" title="4.2新建wpa_supplicant.conf文件"></a>4.2新建wpa_supplicant.conf文件</h3><p>因为ssh连接是需要ip地址的，所以我们需要将zero w在第一次开机自动连接wifi，使其和我们的电脑处于一个局域网，这样我们才可以通过ssh连接到zero w的系统。<br>同样的在boot分区内，新建一个名为wpa_supplicant.conf的文件，然后往里面写入如下内容后保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;你的wifi名字&quot;</span><br><span class="line">psk=&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-组装我们的最小主机并连接"><a href="#5-组装我们的最小主机并连接" class="headerlink" title="5.组装我们的最小主机并连接"></a>5.组装我们的最小主机并连接</h2><p>取出读卡器中的内存卡，然后插入到zero w中，使用一根usb安卓数据线连接电源（5V1A）即可。<br>等待几分钟，期间我们的zero w的指示灯会一直闪烁，很正常，等待指示灯常亮的时候，我们去路由器上，查看一下树莓派的ip地址。</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/6.png" alt=""></p><p>可以看到我们zero w的ip为192.168.0.104，然后使用ssh连接工具（推荐使用putty）连接树莓派，初始账户为pi，密码是raspberry。</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/7.png" alt=""></p><p>连接成功，如上图所示。这样我们的系统就正确无误的安装好了。</p><blockquote><p>ps: 如果是手机开启热点当做一个路由器的话，咱们手机下载一个名叫android terminal的app，然后输入<code>ip neigh</code>指令，就可以查到连接到手机的设备的ip信息了。</p></blockquote><h2 id="6-优化咱们树莓派的系统"><a href="#6-优化咱们树莓派的系统" class="headerlink" title="6.优化咱们树莓派的系统"></a>6.优化咱们树莓派的系统</h2><h3 id="6-1修改源"><a href="#6-1修改源" class="headerlink" title="6.1修改源"></a>6.1修改源</h3><p>因为国外的源，咱们在国内的连接过去网速很慢，所以我们需要修改为国内的源，我修改的是中科大的源。</p><h4 id="6-1-1修改sources-list文件"><a href="#6-1-1修改sources-list文件" class="headerlink" title="6.1.1修改sources.list文件"></a>6.1.1修改sources.list文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list </span><br><span class="line">--注释其他内容，添加以下:</span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/raspbian/raspbian/raspbian stretch main contrib non-free rpi</span></span><br></pre></td></tr></table></figure><h4 id="6-1-2修改raspi-list文件"><a href="#6-1-2修改raspi-list文件" class="headerlink" title="6.1.2修改raspi.list文件"></a>6.1.2修改raspi.list文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br><span class="line">--注释其他内容，添加以下:</span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/archive.raspberrypi.org/debian stretch main ui</span></span><br></pre></td></tr></table></figure><h4 id="6-1-3执行更新"><a href="#6-1-3执行更新" class="headerlink" title="6.1.3执行更新"></a>6.1.3执行更新</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="6-2修改时区"><a href="#6-2修改时区" class="headerlink" title="6.2修改时区"></a>6.2修改时区</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>找到亚洲Asia，然后选择shanghai就可以了</p><h3 id="6-3开机自启ssh"><a href="#6-3开机自启ssh" class="headerlink" title="6.3开机自启ssh"></a>6.3开机自启ssh</h3><p>第一种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>进入选择找到interfacing option选择，然后找到ssh，按回车使能enable就可以了</p><p>第二种：<br>  在终端命令行中启动SSH服务后，如果系统重启或关机后启动，SSH服务默认是关闭的，依然需要手动启动，为了方便可以设置SSH服务开机自动启动，打开/etc/rc.local文件，在语句exit 0之前加入：<br><code>/etc/init.d/ssh start</code></p><p>建议都试试，反之我的是可以了。</p><h2 id="7-安装nginx"><a href="#7-安装nginx" class="headerlink" title="7.安装nginx"></a>7.安装nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"><span class="meta">#</span>启动</span><br><span class="line">sudo /etc/init.d/nginx start</span><br><span class="line"><span class="meta">#</span>重启</span><br><span class="line">sudo /etc/init.d/nginx restart</span><br><span class="line"><span class="meta">#</span>停止</span><br><span class="line">sudo /etc/init.d/nginx stop</span><br></pre></td></tr></table></figure><p>打开浏览器访问192.168.0.104（你的树莓派ip地址），可以看到nginx的页面，说明安装好了。<br>我这边上传了我的博客，如下图</p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/8.png" alt=""></p><p>可以正常的看到页面了，但是这样只能在内网（局域网中）看到，我想让所有人都可以访问怎么办？</p><h2 id="8-内网穿透"><a href="#8-内网穿透" class="headerlink" title="8.内网穿透"></a>8.内网穿透</h2><p>内网穿透，意思就是将内网（本地）的web应用通过nat穿透到公网上，从而让别人可以访问到。</p><p>内网穿透目前主要由ngrok和frp两种，都非常好用，国内ngrok免费的有ittun、sunny和natapp，这三个都是免费的，前面两个可以自定义域名，后面的需要vip版本才可以自定义域名。</p><p>我这三种都试过，我发现sunny的arm版本的ngrok客户端在我的树莓派运行不了，ittun的和natpp的ngrok都可以，由于需要自定义域名，我使用的是ittun的ngrok_arm版本的</p><p>使用方法这三者官网都有详细说明，大家自行查看。</p><p>这是正常运行时的截图，访问<a href="http://zerow.ittun.com/时可以看到控制台http请求日志" target="_blank" rel="noopener">http://zerow.ittun.com/时可以看到控制台http请求日志</a></p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/9.png" alt=""></p><p><img src="/2019/05/10/使用树莓派构建一台服务器，永久运行网站/10.png" alt=""></p><p>因为需要ngrok在后台运行，所以我用的是screen会话使其可以在后台运行。但是开启自启，还没有实现，万一断电或者断网了，我必须手动去运行一下ngrok，这是目前没有解决的痛点。</p><h2 id="9-更多"><a href="#9-更多" class="headerlink" title="9.更多"></a>9.更多</h2><p>树莓派不仅仅只是可以用于运行一个网站，还有很多很多的功能等待你的开发，可以多去看看<a href="http://shumeipai.nxez.com/" target="_blank" rel="noopener">树莓派实验室</a>里面，很多大神都写了很多实用的教程。</p><p><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;由于本人在这段时候，看到了一个叫做树莓派的东东，初步了解之后觉得很有意思，于是想把整个过程记录下来。&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="Linux" scheme="https://inner.ink/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://inner.ink/tags/Linux/"/>
    
      <category term="树莓派" scheme="https://inner.ink/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>中国福州鼓山半日游</title>
    <link href="https://inner.ink/2019/05/03/%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%B7%9E%E9%BC%93%E5%B1%B1%E5%8D%8A%E6%97%A5%E6%B8%B8/"/>
    <id>https://inner.ink/2019/05/03/中国福州鼓山半日游/</id>
    <published>2019-05-03T09:58:34.000Z</published>
    <updated>2019-05-03T11:19:53.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天五一小长假，5.1和5.2天气都不太好，今天天气格外的给面子呀，正好赶上福州地铁2号线开通了。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1.运动包+水壶+帽子<br>2.拉上几个好基友<br>3.带上你的手机</p><h1 id="路线图"><a href="#路线图" class="headerlink" title="路线图"></a>路线图</h1><p>7:40分从宿舍出发，去学校北门公交车站坐48路公交==&gt;8点5分到上街地铁口==&gt;乘坐2号线==&gt;9点04分出了鼓山地铁口==&gt;9点10分鼓山山脚下==&gt;上山<br>估摸着10点出头一些到了鼓山十八景公园南大门吧，在南大门买了3张门票，成人票10元一人，我们带了学生证5元一张。</p><p><img src="/2019/05/03/中国福州鼓山半日游/1.jpg" alt="正面"><br><img src="/2019/05/03/中国福州鼓山半日游/2.jpg" alt="背面"></p><p>门票背面画着十八景的路线图啊，对于路痴可能是一个很痛苦的事情。</p><table><thead><tr><th>景点</th><th>名称</th><th>序号</th></tr></thead><tbody><tr><td>1.达摩面壁</td><td>2.南极升天</td><td>3.仙猿守峡</td></tr><tr><td>4.老鹤巢云</td><td>5.仙人巨迹</td><td>6.福寿泉图</td></tr><tr><td>7.蟠桃满坞</td><td>8.玉笋成林</td><td>9.蚁艇渡湖</td></tr><tr><td>10.鱼灯普照</td><td>11.狮子戏球</td><td>12.金蟾出洞</td></tr><tr><td>13.伏虎驮经</td><td>14.神龙听法</td><td>15.铠甲卸岩</td></tr><tr><td>16.慈航架壑</td><td>17.八仙岩洞</td><td>18.千佛梵宫</td></tr></tbody></table><p>本来想去看看<strong>南极升天</strong>的，没成想走错路了，来到了地图上右边这一小块的地方，那就将就着看吧。<br>第一个看到的应该是<strong>八仙岩洞</strong></p><p><img src="/2019/05/03/中国福州鼓山半日游/3.jpg" alt="吕仙岩"></p><p>清风明月</p><p><img src="/2019/05/03/中国福州鼓山半日游/4.jpg" alt="清风明月"></p><p>在旁边石凳上，拍了个合照</p><p><img src="/2019/05/03/中国福州鼓山半日游/5.jpg" alt="合照"></p><p>往前走去，有个瑶池啥子的玩意来着<br>然后在旁边石壁拍了几张</p><p><img src="/2019/05/03/中国福州鼓山半日游/6.jpg" alt="傻阳"><br><img src="/2019/05/03/中国福州鼓山半日游/7.jpg" alt="w"></p><p>继续往前探去，来到一个路口，听游客说左边的路走不通了，我偏不信还，往左走去，没几步前面断了路，于是返回原路往右达摩洞走去。<br>到了<strong>达摩洞</strong>，几块巨石巧夺天工，构成了一个不深的洞穴，左边巨石就是达摩面壁的墙壁，洞最里处供奉着几尊菩萨，过于神圣，不敢亵渎，又是乎没有photo<br>过了达摩洞后又去了<strong>登高台</strong>瞭望整个福州，登高眺远，真有一种<strong>会当凌绝顶，一览纵山小</strong>的feel，海拔大概500多不到600的样子吧。<br>路上有很多这样的石刻的地图</p><p><img src="/2019/05/03/中国福州鼓山半日游/8.jpg" alt="w"></p><p>来到<strong>佛窟</strong>这边</p><p><img src="/2019/05/03/中国福州鼓山半日游/9.jpg" alt="佛窟"><br><img src="/2019/05/03/中国福州鼓山半日游/10.jpg" alt="佛窟"></p><p>从佛窟出来又到了一个路口</p><p><img src="/2019/05/03/中国福州鼓山半日游/11.jpg" alt="路口"></p><p>在路口上面有个<strong>鼓山赋</strong>啊，那文采，学富五车</p><p><img src="/2019/05/03/中国福州鼓山半日游/12.jpg" alt="鼓山赋"></p><p>最后去瞟了一眼<strong>一笔成虎</strong></p><p><img src="/2019/05/03/中国福州鼓山半日游/13.jpg" alt="一笔成虎"></p><p>大概感觉这十八景徒有虚名，都是一些石壁刻字，强行凑了十八个景点出来，但是基于门票如此廉价，我也不好多说什么。<br>看了一眼时间大概是11点10几分吧，然后往南大门出口走出去。<br>又到了鼓山十八景公园这边，去了趟洗手间准备下山。<br>在鼓山站坐地铁到了师大站，12点45分出的师大地铁口，然后去正荣半天妖吃了一顿好的，吃饱喝足已是下午2点。<br>半天下来，步数一共17k多吧，我的老寒腿啊，下山的时候一直抖。。。。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>福州两大名山，鼓山旗山，都可以一去啊。抓住大学最后的尾巴，好好的浪一波。</p><p><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天五一小长假，5.1和5.2天气都不太好，今天天气格外的给面子呀，正好赶上福州地铁2号线开通了。&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="travel" scheme="https://inner.ink/categories/travel/"/>
    
    
      <category term="travel" scheme="https://inner.ink/tags/travel/"/>
    
      <category term="福州，鼓山" scheme="https://inner.ink/tags/%E7%A6%8F%E5%B7%9E%EF%BC%8C%E9%BC%93%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>深海迷航联机教程</title>
    <link href="https://inner.ink/2019/05/02/%E6%B7%B1%E6%B5%B7%E8%BF%B7%E8%88%AA%E8%81%94%E6%9C%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://inner.ink/2019/05/02/深海迷航联机教程/</id>
    <published>2019-05-02T14:05:49.000Z</published>
    <updated>2019-05-03T11:23:11.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深海迷航联机mod教程"><a href="#深海迷航联机mod教程" class="headerlink" title="深海迷航联机mod教程"></a>深海迷航联机mod教程</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此联机mod由碧蓝之星提供，使用mod前先关闭所有杀毒软件还有防火墙</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-首先下载一个蒲公英vpn"><a href="#1-首先下载一个蒲公英vpn" class="headerlink" title="1.首先下载一个蒲公英vpn"></a>1.首先下载一个蒲公英vpn</h3><p>点击下载安装==&gt;<a href="http://cloud.aboutme.ink/s/YafattpcqtFkB9a" target="_blank" rel="noopener">蒲公英</a></p><h3 id="2-注册一个账号"><a href="#2-注册一个账号" class="headerlink" title="2.注册一个账号"></a>2.注册一个账号</h3><p>然后注册账号==&gt;<a href="https://console.oray.com/passport/register.html" target="_blank" rel="noopener">点击注册</a></p><h3 id="3-登陆"><a href="#3-登陆" class="headerlink" title="3.登陆"></a>3.登陆</h3><p>然后登陆蒲公英网站==&gt;<a href="https://console.oray.com" target="_blank" rel="noopener">点击登陆</a></p><h3 id="4-进入控制台"><a href="#4-进入控制台" class="headerlink" title="4.进入控制台"></a>4.进入控制台</h3><p>来到控制台<br><img src="/2019/05/02/深海迷航联机教程/6.png" alt=""></p><h3 id="5-组网"><a href="#5-组网" class="headerlink" title="5.组网"></a>5.组网</h3><p>点击智能组网，管理默认网络<br><img src="/2019/05/02/深海迷航联机教程/7.png" alt=""><br>设置入网方式为允许任何人加入网络后确认即可，记住你的网络ID，例如下图的是513614009<br><img src="/2019/05/02/深海迷航联机教程/8.png" alt=""></p><h3 id="6-打开蒲公英软件"><a href="#6-打开蒲公英软件" class="headerlink" title="6.打开蒲公英软件"></a>6.打开蒲公英软件</h3><p>然后来到桌面，打开蒲公英软件后登陆<br>点击个人头像那里<br><img src="/2019/05/02/深海迷航联机教程/9.png" alt=""><br>加入其它网络<br><img src="/2019/05/02/深海迷航联机教程/10.png" alt=""><br>点击我知道了<br><img src="/2019/05/02/深海迷航联机教程/11.png" alt=""><br>输入网络ID，加入网络<br><img src="/2019/05/02/深海迷航联机教程/12.png" alt=""><br>注意只支持3个人组网联机，3个人都必须加入同一个网络ID</p><h3 id="7-使用联机mod"><a href="#7-使用联机mod" class="headerlink" title="7.使用联机mod"></a>7.使用联机mod</h3><p>点击下载安装==&gt;<a href="http://cloud.aboutme.ink/s/dCQDECRP2re2Wyt" target="_blank" rel="noopener">联机mod-1.3</a><br>复制到游戏根目录，双击安装后即可开启联机了。<br><img src="/2019/05/02/深海迷航联机教程/1.png" alt=""><br>这样你就可以加入别人的房间了，但是你自己无法开启主机（就是自己做主机，别人来连接）</p><h3 id="8-开启主机建房间"><a href="#8-开启主机建房间" class="headerlink" title="8.开启主机建房间"></a>8.开启主机建房间</h3><p>首先关闭window防火墙，自行百度。<br>找到游戏主目录<br><img src="/2019/05/02/深海迷航联机教程/2.png" alt=""><br>双击联机服务端.bat后出现如下页面<br><img src="/2019/05/02/深海迷航联机教程/13.png" alt=""><br>黑色控制台上第一步需要输入端口，我们直接按回车使用默认端口就行。<br>第二步需要你输入游戏目录，我们先在文件中返回上一层目录。<br><img src="/2019/05/02/深海迷航联机教程/3.png" alt=""><br>然后拖游戏目录进去<br><img src="/2019/05/02/深海迷航联机教程/4.png" alt=""><br>然后去掉引号再按一次回车就可以开启主机了，注意这个黑色的控制台界面不要关闭！！！！<br>然后叫上你的小伙伴进入你的ip就可以联机，你的ip在蒲公英上有个主机172.xx.xx.xx你复制一下发给好友，注意要处于同一个蒲公英网络下才可以联机，目录蒲公英组网只支持3个人（免费版）<br><img src="/2019/05/02/深海迷航联机教程/5.png" alt=""><br>上图框框圈起来的是你的ip，把这个发给好友，可以看到现在蒲公英有两个人，一个是我，一个是我的好友。我们两个人处于同一个局域网，所以可以联机。</p><h3 id="9-祝你联机愉快，如果有版权问题，请联系我"><a href="#9-祝你联机愉快，如果有版权问题，请联系我" class="headerlink" title="9.祝你联机愉快，如果有版权问题，请联系我"></a>9.祝你联机愉快，如果有版权问题，请联系我</h3><p><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深海迷航联机mod教程&quot;&gt;&lt;a href=&quot;#深海迷航联机mod教程&quot; class=&quot;headerlink&quot; title=&quot;深海迷航联机mod教程&quot;&gt;&lt;/a&gt;深海迷航联机mod教程&lt;/h1&gt;&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;head
      
    
    </summary>
    
      <category term="game" scheme="https://inner.ink/categories/game/"/>
    
    
      <category term="深海迷航，联机" scheme="https://inner.ink/tags/%E6%B7%B1%E6%B5%B7%E8%BF%B7%E8%88%AA%EF%BC%8C%E8%81%94%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>小飞机ss/ssr的部署方法</title>
    <link href="https://inner.ink/2019/05/02/%E5%B0%8F%E9%A3%9E%E6%9C%BAss-ssr%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
    <id>https://inner.ink/2019/05/02/小飞机ss-ssr的部署方法/</id>
    <published>2019-05-02T07:51:33.000Z</published>
    <updated>2019-05-03T11:20:05.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是小飞机呀？"><a href="#一、什么是小飞机呀？" class="headerlink" title="一、什么是小飞机呀？"></a>一、什么是小飞机呀？</h1><blockquote><p>小飞机就是可以飞出去的东西啦（fq）懂了吧。</p></blockquote><h1 id="二、如何部署"><a href="#二、如何部署" class="headerlink" title="二、如何部署"></a>二、如何部署</h1><h2 id="1-首先你需要一台云服务器或者一台vps"><a href="#1-首先你需要一台云服务器或者一台vps" class="headerlink" title="1.首先你需要一台云服务器或者一台vps"></a>1.首先你需要一台云服务器或者一台vps</h2><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line">yum install unzip zip -y</span><br><span class="line">yum install wget -y</span><br><span class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/Moexin/Easy-SSR-Bash-Python-The-Final/master/ssr.zip</span><br><span class="line">unzip ssr.zip</span><br><span class="line">cd SSR*</span><br><span class="line">bash install.sh</span><br></pre></td></tr></table></figure><h2 id="3-开启服务并设置用户端口"><a href="#3-开启服务并设置用户端口" class="headerlink" title="3.开启服务并设置用户端口"></a>3.开启服务并设置用户端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/SSR*</span><br><span class="line">./serve.sh ==&gt; 开启服务</span><br><span class="line">./user.sh ==&gt; 设置用户</span><br></pre></td></tr></table></figure><h2 id="4-复制添加用户成功后的一段ssr链接"><a href="#4-复制添加用户成功后的一段ssr链接" class="headerlink" title="4.复制添加用户成功后的一段ssr链接"></a>4.复制添加用户成功后的一段ssr链接</h2><p>我框起来那部分复制一下，然后保存起来</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/1.png" alt=""></p><h2 id="5-客户端连接小飞机"><a href="#5-客户端连接小飞机" class="headerlink" title="5.客户端连接小飞机"></a>5.客户端连接小飞机</h2><h3 id="1-Android"><a href="#1-Android" class="headerlink" title="1.Android"></a>1.Android</h3><p>首先在手机里复制一下刚刚那个ssr链接</p><p>然后打开<strong>shadowsocks R</strong>软件后，点击标题那里，下图黄色框框</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/2.png" alt=""></p><p>然后点击右下角的+号，接着点击import from Clipboard</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/3.png" alt=""></p><p>会弹出一个框，点确认ok</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/4.png" alt=""></p><p>然后选中这个节点后会回到主界面，点击右上角的小飞机，即刻飞行！</p><p>google页面</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/5.jpg" alt=""></p><p>Yutobe页面</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/6.jpg" alt=""></p><h3 id="2-Window"><a href="#2-Window" class="headerlink" title="2.Window"></a>2.Window</h3><p>双击打开shadowsock-R软件后，在状态栏中找到小飞机图标。<br>然后右键选择从剪贴板导入，然后确定即可</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/9.png" alt=""><br><img src="/2019/05/02/小飞机ss-ssr的部署方法/7.png" alt=""><br><img src="/2019/05/02/小飞机ss-ssr的部署方法/8.png" alt=""></p><p>系统代理模式选择PAC</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/12.png" alt=""></p><p>代理规则绕过局域网和大陆</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/13.png" alt=""></p><p>google页面</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/10.png" alt=""></p><p>twitch页面</p><p><img src="/2019/05/02/小飞机ss-ssr的部署方法/11.png" alt=""></p><h3 id="3-iphone和mac也有各自的客户端"><a href="#3-iphone和mac也有各自的客户端" class="headerlink" title="3.iphone和mac也有各自的客户端"></a>3.iphone和mac也有各自的客户端</h3><p>后续整理</p><h3 id="4-各类客户端下载地址"><a href="#4-各类客户端下载地址" class="headerlink" title="4.各类客户端下载地址"></a>4.各类客户端下载地址</h3><p>后续整理，如有需要先email我</p><p><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是小飞机呀？&quot;&gt;&lt;a href=&quot;#一、什么是小飞机呀？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是小飞机呀？&quot;&gt;&lt;/a&gt;一、什么是小飞机呀？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;小飞机就是可以飞出去的东西啦（fq）懂了吧。&lt;/p
      
    
    </summary>
    
      <category term="Linux" scheme="https://inner.ink/categories/Linux/"/>
    
    
      <category term="ssr" scheme="https://inner.ink/tags/ssr/"/>
    
      <category term="ss" scheme="https://inner.ink/tags/ss/"/>
    
      <category term="小飞机" scheme="https://inner.ink/tags/%E5%B0%8F%E9%A3%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Centos部署ngrok内网穿透服务器</title>
    <link href="https://inner.ink/2019/05/02/Centos%E9%83%A8%E7%BD%B2ngrok%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://inner.ink/2019/05/02/Centos部署ngrok内网穿透服务器/</id>
    <published>2019-05-02T06:59:52.000Z</published>
    <updated>2019-05-02T07:52:45.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><blockquote><p><strong>ngrok</strong> 是一个反向代理,通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。<br>简单理解就是可以实现内网穿透到公网。</p></blockquote><h1 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h1><blockquote><p>1台云服务器或者vps+一个域名</p></blockquote><h1 id="三、开搞"><a href="#三、开搞" class="headerlink" title="三、开搞"></a>三、开搞</h1><h2 id="1-安装go语言"><a href="#1-安装go语言" class="headerlink" title="1.安装go语言"></a>1.安装go语言</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//请下载合适自己的go语言包  我是centos 7 64位 所以选择以下包</span><br><span class="line">wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz</span><br><span class="line">vim /etc/profile</span><br><span class="line">//添加以下内容：</span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">source /etc/profile</span><br><span class="line">//检测是否安装成功go</span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h2 id="2-下载ngrok源码并编译"><a href="#2-下载ngrok源码并编译" class="headerlink" title="2.下载ngrok源码并编译"></a>2.下载ngrok源码并编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /ngrok</span><br><span class="line">cd /ngrok</span><br><span class="line">git clone https://github.com/inconshreveable/ngrok.git</span><br></pre></td></tr></table></figure><h2 id="3-域名解析"><a href="#3-域名解析" class="headerlink" title="3.域名解析"></a>3.域名解析</h2><blockquote><p>解析一个二级域名作为你的ngrok客户端访问的域名，记录类型为A记录，记录值ngrok，ip为你的服务器ip。</p></blockquote><p><img src="/2019/05/02/Centos部署ngrok内网穿透服务器/1.png" alt=""></p><h2 id="4-给你的域名生成证书"><a href="#4-给你的域名生成证书" class="headerlink" title="4.给你的域名生成证书"></a>4.给你的域名生成证书</h2><p>在ngrok根目录下执行以下命令生成证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /ngrok</span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj "/CN=myngork.com" -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj "/CN=myngork.com" -out device.csr</span><br><span class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure><p>然后执行覆盖命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yes|cp rootCA.pem assets/client/tls/ngrokroot.crt</span><br><span class="line">yes|cp device.crt assets/server/tls/snakeoil.crt</span><br><span class="line">yes|cp device.key assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure><h2 id="5-编译服务端ngrokd"><a href="#5-编译服务端ngrokd" class="headerlink" title="5.编译服务端ngrokd"></a>5.编译服务端ngrokd</h2><blockquote><p>#编译ngrokd（服务器端）<br><code>make release-server</code><br>编译结束后会在ngrok/bin目录下生成一个ngrokd文件，这个文件就是服务器端启动的程序。</p></blockquote><h2 id="6-编译客户端ngrok"><a href="#6-编译客户端ngrok" class="headerlink" title="6.编译客户端ngrok"></a>6.编译客户端ngrok</h2><p>当服务器端ngrok启动后，在客户端，也就是window下的需要内网穿透场景的地方也需要一个启动程序来启动。<br>我客户端电脑是window64位的，所以命令就是<code>GOOS=windows GOARCH=amd64 make release-client</code><br>编译成功后会在ngrok/bin/windows_amd64/目录下面有ngrok.exe,把这个exe文件下载到你的客户端电脑中。</p><blockquote><p>#Linux 平台 32 位系统：<code>GOOS=linux GOARCH=386 make release-client</code></p><p>#Linux 平台 64 位系统：<code>GOOS=linux GOARCH=amd64 make release-client</code></p><p>#Windows 平台 32 位系统：<code>GOOS=windows GOARCH=386 make release-client</code></p><p>#Windows 平台 64 位系统：<code>GOOS=windows GOARCH=amd64 make release-client</code></p><p>#MAC 平台 32 位系统：<code>GOOS=darwin GOARCH=386 make release-client</code></p><p>#MAC 平台 64 位系统：<code>GOOS=darwin GOARCH=amd64 make release-client</code></p><p>#ARM 平台：<code>GOOS=linux GOARCH=arm make release-client</code></p></blockquote><h2 id="7-启动服务端ngrokd"><a href="#7-启动服务端ngrokd" class="headerlink" title="7.启动服务端ngrokd"></a>7.启动服务端ngrokd</h2><p><code>/bin/ngrokd -tlsKey=&quot;assets/server/tls/snakeoil.key&quot; -tlsCrt=&quot;assets/server/tls/snakeoil.crt&quot; -domain=&quot;myngrok.com&quot; -httpAddr=&quot;:9000&quot; -httpsAddr=&quot;:9001&quot; -tunnelAddr=&quot;:4443&quot;</code></p><blockquote><p>#参数说明：</p><p>#-domain 访问ngrok是所设置的服务地址生成证书时那个</p><p>#-httpAddr http协议端口 默认为80</p><p>#-httpsAddr https协议端口 默认为443 （可配置https证书）</p><p>#-tunnelAddr 通道端口 默认4443</p></blockquote><h2 id="8-内网穿透实例"><a href="#8-内网穿透实例" class="headerlink" title="8.内网穿透实例"></a>8.内网穿透实例</h2><h3 id="1-在window里启动一个localhost-4000的hexo博客应用程序。"><a href="#1-在window里启动一个localhost-4000的hexo博客应用程序。" class="headerlink" title="1.在window里启动一个localhost:4000的hexo博客应用程序。"></a>1.在window里启动一个localhost:4000的hexo博客应用程序。</h3><h3 id="2-从服务器上下载ngrok-exe客户端程序，然后创建一个ngrok文件夹，在里面新建一个ngrok-cfg文件并写入以下内容"><a href="#2-从服务器上下载ngrok-exe客户端程序，然后创建一个ngrok文件夹，在里面新建一个ngrok-cfg文件并写入以下内容" class="headerlink" title="2.从服务器上下载ngrok.exe客户端程序，然后创建一个ngrok文件夹，在里面新建一个ngrok.cfg文件并写入以下内容"></a>2.从服务器上下载ngrok.exe客户端程序，然后创建一个ngrok文件夹，在里面新建一个ngrok.cfg文件并写入以下内容</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_addr:</span> <span class="string">"ngrok.inner.ink:4443"</span></span><br><span class="line"><span class="attr">trust_host_root_certs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="/2019/05/02/Centos部署ngrok内网穿透服务器/4.png" alt=""></p><h3 id="3-启动内网穿透ngrok-exe"><a href="#3-启动内网穿透ngrok-exe" class="headerlink" title="3.启动内网穿透ngrok.exe"></a>3.启动内网穿透ngrok.exe</h3><p>打开cmd，然后在ngrok这个目录下输入<code>ngrok -config=ngrok.cfg -subdomain=shmh 4000</code>按回车运行</p><p><img src="/2019/05/02/Centos部署ngrok内网穿透服务器/3.jpg" alt=""></p><h3 id="4-在浏览器中访问shmh-ngrok-inner-ink-9000"><a href="#4-在浏览器中访问shmh-ngrok-inner-ink-9000" class="headerlink" title="4.在浏览器中访问shmh.ngrok.inner.ink:9000"></a>4.在浏览器中访问shmh.ngrok.inner.ink:9000</h3><p>可以看到我的博客已经被访问了，而且ngrok客服端中也会有GET报文出现。</p><p><img src="/2019/05/02/Centos部署ngrok内网穿透服务器/2.jpg" alt=""></p><h3 id="5-配置deploy-bat文件方便启动"><a href="#5-配置deploy-bat文件方便启动" class="headerlink" title="5.配置deploy.bat文件方便启动"></a>5.配置deploy.bat文件方便启动</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> OFF</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>a</span><br><span class="line"><span class="built_in">Title</span> ngrok启动</span><br><span class="line"><span class="built_in">Mode</span> <span class="built_in">con</span> cols=<span class="number">109</span> lines=<span class="number">30</span></span><br><span class="line">:<span class="built_in">START</span></span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">Echo</span>                  ==========================================================================</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">Echo</span>                                         ngrok启动</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">Echo</span>                                         作者: 知与南</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">Echo</span>                  ==========================================================================</span><br><span class="line"><span class="built_in">Echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">:NGROKD</span><br><span class="line"><span class="built_in">Echo</span>           <span class="number">1</span>.请输入自定义域名前缀，如“test”，即分配给你的穿透域名为：“test.ngrok.inner.ink”</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">set</span> /p clientid=   请输入：</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">Echo</span>           <span class="number">2</span>.输入需要本地应用端口号，如“<span class="number">4000</span>“</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">set</span> /p port=   请输入：</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">ngrok -config=ngrok.cfg -subdomain=<span class="variable">%clientid%</span> <span class="variable">%port%</span></span><br><span class="line"><span class="built_in">PAUSE</span></span><br><span class="line"><span class="keyword">goto</span> NGROKD</span><br></pre></td></tr></table></figure><h3 id="6-这样每次启动程序，只需要双击deploy-bat文件，根据提示输入自定义域名和本地端口按回车运行就可以了。"><a href="#6-这样每次启动程序，只需要双击deploy-bat文件，根据提示输入自定义域名和本地端口按回车运行就可以了。" class="headerlink" title="6.这样每次启动程序，只需要双击deploy.bat文件，根据提示输入自定义域名和本地端口按回车运行就可以了。"></a>6.这样每次启动程序，只需要双击deploy.bat文件，根据提示输入自定义域名和本地端口按回车运行就可以了。</h3><p><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ngrok&lt;/strong&gt; 是一个反向代理,通过在公共的端点和本地运行的 Web
      
    
    </summary>
    
      <category term="Linux" scheme="https://inner.ink/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://inner.ink/tags/Centos/"/>
    
      <category term="ngrok" scheme="https://inner.ink/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>docker+gogs+nginx配置Git服务自动部署Web应用</title>
    <link href="https://inner.ink/2019/04/22/docker-gogs-nginx%E9%85%8D%E7%BD%AEGit%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/"/>
    <id>https://inner.ink/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/</id>
    <published>2019-04-22T07:16:17.000Z</published>
    <updated>2019-05-02T07:48:16.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何部署一个git服务而且又可以自动部署web应用呢？"><a href="#如何部署一个git服务而且又可以自动部署web应用呢？" class="headerlink" title="如何部署一个git服务而且又可以自动部署web应用呢？"></a>如何部署一个git服务而且又可以自动部署web应用呢？</h1><ul><li>1.docker</li><li>2.gogs</li><li>3.nginx</li></ul><p>明白以上三者是什么，就可以开始搞事了！</p><h2 id="一、放通端口，阿里云腾讯云的需要到各自的官网开放"><a href="#一、放通端口，阿里云腾讯云的需要到各自的官网开放" class="headerlink" title="一、放通端口，阿里云腾讯云的需要到各自的官网开放"></a>一、放通端口，阿里云腾讯云的需要到各自的官网开放</h2><p>1.查看firewall服务状态<br><code>systemctl status firewalld</code><br>2.查看firewall的状态<br><code>firewall-cmd --state</code><br>3.开启、重启、关闭firewall服务</p><ul><li>开启<br>  <code>service firewalld start</code></li><li>重启<br>  <code>service firewalld restart</code></li><li>关闭<br>  <code>service firewalld stop</code></li></ul><p>4.查看防火墙规则<br><code>firewall-cmd --list-all</code><br>5.查询、开放、关闭端口</p><ul><li>查询端口是否开放<br>  <code>firewall-cmd --query-port=8080/tcp</code></li><li>开放80端口<br>  <code>firewall-cmd --permanent --add-port=80/tcp</code></li><li>移除端口<br>  <code>firewall-cmd --permanent --remove-port=8080/tcp</code></li><li>重启防火墙(修改配置后要重启防火墙)<br>  <code>firewall-cmd --reload</code></li><li>参数解释<br>  1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>  2、–permanent：表示设置为持久；<br>  3、–add-port：标识添加的端口；</li></ul><h2 id="二、安装docker"><a href="#二、安装docker" class="headerlink" title="二、安装docker"></a>二、安装docker</h2><p>1、使用 sudo 或 root 权限登录 Centos。</p><p>2、确保 yum 包更新到最新。</p><p><code>$ sudo yum update</code><br>3、执行 Docker 安装脚本。</p><p><code>$ curl -fsSL https://get.docker.com -o get-docker.sh</code><br><code>$ sudo sh get-docker.sh</code><br>执行这个脚本会添加 docker.repo 源并安装 Docker。</p><p>4、启动 Docker 进程。</p><p><code>sudo systemctl start docker</code><br>5、验证 docker 是否安装成功并在容器中执行一个测试的镜像。</p><p><code>$ sudo docker run hello-world</code><br><code>docker ps</code><br>到此，Docker 在 CentOS 系统的安装完成。(这部分教程来自菜鸟教程，更多系统安装请前往<a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>)</p><h2 id="三、用小南提供的自动脚本nan-deploy-sh去安装gogs和nginx"><a href="#三、用小南提供的自动脚本nan-deploy-sh去安装gogs和nginx" class="headerlink" title="三、用小南提供的自动脚本nan-deploy.sh去安装gogs和nginx"></a>三、用小南提供的自动脚本nan-deploy.sh去安装gogs和nginx</h2><p>1、下载nan-deploy.sh<br><code>$ curl -O http://aboutme.ink/share/nan-deploy.sh</code><br>2、给脚本赋予权限<br><code>$ chmod +x nan-deploy.sh</code><br>3、运行脚本<br><code>$ ./nan-deploy.sh /home/docker/gogs/ 10080 10022 80</code><br>参数解释</p><ul><li>/home/docker/gogs/  是参数一，代表了gogs和nginx安装的路径</li><li>10080 是参数二，表示gogs应用访问端口，ip:10080去访问gogs首页</li><li>10022 是参数三，表示gogs对外暴露的ssh端口，用于配置秘钥后下载和上传git代码</li><li>80 是参数四，表示nginx的端口，ip直接可以访问nginx首页（80默认隐藏）</li></ul><p>以上四个参数自己调整也可以，新手建议默认按照我的配置就可以了<br>以下是完整运行截图<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/1.png" alt=""><br>4、打开浏览器访问ip:10080和ip:80<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/2.png" alt=""><br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/3.png" alt=""><br>如果出现这些页面说明成功了！<br><img src="https://inner.ink/pqs/img/huaji.gif" alt=""><br>5、配置gogs，打开页面ip:10080<br>数据库选SQLite3，域名写自己的服务器ip，ssh端口填参数三10022，勾选内置服务器，http端口填写参数二10080，应用url填写ip:10080，然后点立即安装<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/4.png" alt=""><br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/5.png" alt=""><br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/6.png" alt=""><br>点击立即安装，稍等一会会跳转登陆页面，如下<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/7.png" alt=""><br>6、然后注册一个账号并且登陆会成为管理员（第一个账号）<br>7、新建一个仓库，并且克隆到本地<br>8、点击仓库设置配置git钩子或者web钩子<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/8.png" alt=""><br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/9.png" alt=""><br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/16.png" alt=""><br>以上配置只需要修改UserName、repo和repoHttpUrl就行，然后点更新钩子设置<br>9、克隆你的仓库到本地并且添加一个index.txt文件并写入内容<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/10.png" alt=""><br>10、更新你的本地仓库后，推送到远程仓库<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/11.png" alt=""><br>如果会显示上图的信息，说明你的钩子设置成功，并且代码已经推送到了nginx服务器上<br>11、打开你的浏览器测试一下<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/12.png" alt=""><br>可以看到，已经可以访问了<br>12、再次更新你的本地仓库<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/13.png" alt=""><br>13、推送到远程仓库<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/14.png" alt=""><br>14、再次打开浏览器访问<br><img src="/2019/04/22/docker-gogs-nginx配置Git服务自动部署Web应用/15.png" alt=""></p><h2 id="小南有话说"><a href="#小南有话说" class="headerlink" title="小南有话说"></a>小南有话说</h2><p>1.其实我利用的原理就是git本身有钩子的一个功能特点，结合docker下的gogs和nginx开发了一套容易理解又非常高效的web应用自动部署平台<br>2.gogs还支持webhooks的web钩子进行代码的部署，这边我就没有多做讲解了，如果你学会了git钩子部署，那么web钩子部署也不是难事<br><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何部署一个git服务而且又可以自动部署web应用呢？&quot;&gt;&lt;a href=&quot;#如何部署一个git服务而且又可以自动部署web应用呢？&quot; class=&quot;headerlink&quot; title=&quot;如何部署一个git服务而且又可以自动部署web应用呢？&quot;&gt;&lt;/a&gt;如何部署一
      
    
    </summary>
    
      <category term="Linux" scheme="https://inner.ink/categories/Linux/"/>
    
    
      <category term="docker" scheme="https://inner.ink/tags/docker/"/>
    
      <category term="nginx" scheme="https://inner.ink/tags/nginx/"/>
    
      <category term="gogs" scheme="https://inner.ink/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用</title>
    <link href="https://inner.ink/2019/04/21/%E7%94%A8nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE%E5%88%B0%E5%85%AC%E7%BD%91ip%E7%9A%84%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://inner.ink/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/</id>
    <published>2019-04-21T03:51:04.000Z</published>
    <updated>2019-05-02T07:49:20.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何用nginx配置二级域名解析到ip的不同端口呢"><a href="#如何用nginx配置二级域名解析到ip的不同端口呢" class="headerlink" title="如何用nginx配置二级域名解析到ip的不同端口呢"></a>如何用nginx配置二级域名解析到ip的不同端口呢</h1><p>总所周知，ip:80这种方式的web应用可以直接用ip去访问，原因是输入ip的时候，浏览器会自动的默认认为是ip:80这样的形式去访问。<br>利用这一点我们可以用域名解析到ip上进行只需要输入<code>www.domain.com</code>去访问web页面。各大网站也是如此。</p><h2 id="如果是ip-80以外的端口怎么办？"><a href="#如果是ip-80以外的端口怎么办？" class="headerlink" title="如果是ip:80以外的端口怎么办？"></a>如果是ip:80以外的端口怎么办？</h2><p>一台服务器不可能说只部署一个web应用吧，其他的都要通过ip+端口或者域名+端口去访问多麻烦啊，而且样子也不好看呀。<br>这个时候，<strong>救世主nginx</strong>大爷就出现了，他说我有很多的<em>NB功能</em>啊，例如反向代理啊！<br><img src="https://inner.ink/pqs/img/nb.gif" alt=""></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>你需要有一个域名和一台服务器（国内需备案）<br>然后去解析域名，添加两个A记录如下图<br><img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/0.png" alt=""></p><h2 id="Nginx方向代理"><a href="#Nginx方向代理" class="headerlink" title="Nginx方向代理"></a>Nginx方向代理</h2><p>我们要如何使用这个技能呢？</p><ul><li>1.首先找到你服务器中nginx的配置文件所在的文件夹<br>  一般都是<code>/usr/local/nginx/conf/</code>这个文件夹下有个nginx.conf或者default.conf反正.conf的文件都看一看<br>  命令是<code>cat nginx.conf</code><br>  <img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/1.png" alt=""></li><li>2.然后打开nginx.conf看一眼里面的配置<br>  主要是找到一句话叫做<code>include xxxx/*.conf</code>,如果没有你自己加一句吧<br>  <img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/2.png" alt=""></li><li>3.然后进入这个xxxx文件夹下新建一个.conf，我这里是gogs.conf<br>  然后编辑gogs.conf的内容为下图，然后保存<br>  <img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/3.jpg" alt=""></li><li>4.记得重启nginx，如果没报错的话，你配置应该成功了</li></ul><p>然后打开浏览器输入git.aboutme.ink试试<br><img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/5.png" alt=""><br>成功咯！<br><img src="https://inner.ink/pqs/img/wen.gif" alt=""><br>然后我再来一个cloud.aboutme.ink试试,打开浏览器访问 cloud.aboutme.ink也可以访问了<br><img src="/2019/04/21/用nginx配置反向代理实现二级域名配置到公网ip的不同端口的应用/6.png" alt=""></p><h2 id="gogs-conf的代码如下"><a href="#gogs-conf的代码如下" class="headerlink" title="gogs.conf的代码如下"></a>gogs.conf的代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name git.aboutme.ink;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass http://127.0.0.1:10080;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log /home/wwwlogs/git.aboutme.ink.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>大家可以按照我的方法试试看，不行可以留言反馈咯，我会及时解决的。至于这两个应用怎么构建的，后续出教程啊！<br><img src="https://inner.ink/pqs/img/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何用nginx配置二级域名解析到ip的不同端口呢&quot;&gt;&lt;a href=&quot;#如何用nginx配置二级域名解析到ip的不同端口呢&quot; class=&quot;headerlink&quot; title=&quot;如何用nginx配置二级域名解析到ip的不同端口呢&quot;&gt;&lt;/a&gt;如何用nginx配置二
      
    
    </summary>
    
      <category term="nginx" scheme="https://inner.ink/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://inner.ink/tags/nginx/"/>
    
      <category term="domain" scheme="https://inner.ink/tags/domain/"/>
    
  </entry>
  
  <entry>
    <title>关于php执行shell命令的一些体会</title>
    <link href="https://inner.ink/2019/04/19/%E5%85%B3%E4%BA%8Ephp%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%93%E4%BC%9A/"/>
    <id>https://inner.ink/2019/04/19/关于php执行shell命令的一些体会/</id>
    <published>2019-04-19T10:21:29.000Z</published>
    <updated>2019-04-19T10:58:49.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于php执行shell命令不得不提的一些东西"><a href="#关于php执行shell命令不得不提的一些东西" class="headerlink" title="关于php执行shell命令不得不提的一些东西"></a>关于php执行shell命令不得不提的一些东西</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天刚新买了一台阿里云香港的轻量应用服务器<br><img src="/2019/04/19/关于php执行shell命令的一些体会/1.png" alt=""><br>价钱还不错，24CNY一月，30Mbs带宽，1024G流量每月。<br>这是我的推荐码的入口<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=hp167aqc" target="_blank" rel="noopener">阿里云服务器入口</a><br>咳咳。。。拉回正题，我就开始配了一个lnmp，然后搭了一个docker下的gogs，然后搞了一个webhooks钩子。<br>之前我那台华东2的服务器配的是lamp+docker+gogs，可以自动部署代码上线。所以按照之前的步骤，我一步一步的走啊走啊，然后神奇的发现我的php执行不了shell脚本。<br>然后我各种度娘，google之类，发现说是php.ini里面有个字段叫做disable_funtions把php可以执行的shell函数都禁掉了，只要删掉想要的函数，就可以执行了。<br>之后我打开我的php.ini，然后找啊找，仍是没找到，然后我把这个php.ini整个内容复制到我的win10的word里面，查找这个字段，还是找不到。然后又去百度，然后搜啊搜，找啊找。搞了5、6个小时吧。<br>我都要崩溃了。后来把，我去群里问了个大神，大神一顿操作噼里啪啦，然后说让我把ip给他，他登入我服务器帮我找原因，3秒钟后，大神在php.ini的305行找到了这个字段。<br>顿时，我无语了，我找了这么久都没找到。哎。。懵逼的一天。<br><img src="/2019/04/19/关于php执行shell命令的一些体会/2.png" alt=""><br>然后我把shell_exec()从监狱里释放出来，然后在我的领地上，使用这个魔法，成功了，可以执行脚本了。<br>然后就是要给www提升一下权限，让它可以代我去执行各种骚操作<br><img src="/2019/04/19/关于php执行shell命令的一些体会/3.png" alt=""><br>具体整个自动部署的教程链接在这里–&gt;<a href="http://gitku.cn:8083/" target="_blank" rel="noopener">自动部署</a></p><h3 id="骚啊骚-搞了我一天"><a href="#骚啊骚-搞了我一天" class="headerlink" title="骚啊骚 搞了我一天"></a>骚啊骚 搞了我一天</h3><p><img src="/2019/04/19/关于php执行shell命令的一些体会/huanhu.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于php执行shell命令不得不提的一些东西&quot;&gt;&lt;a href=&quot;#关于php执行shell命令不得不提的一些东西&quot; class=&quot;headerlink&quot; title=&quot;关于php执行shell命令不得不提的一些东西&quot;&gt;&lt;/a&gt;关于php执行shell命令不得不
      
    
    </summary>
    
      <category term="php" scheme="https://inner.ink/categories/php/"/>
    
    
      <category term="CentOs" scheme="https://inner.ink/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://inner.ink/tags/Linux/"/>
    
      <category term="php" scheme="https://inner.ink/tags/php/"/>
    
      <category term="shell" scheme="https://inner.ink/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOs cp 去掉覆盖提醒</title>
    <link href="https://inner.ink/2019/04/19/Centos-cp-%E5%8E%BB%E6%8E%89%E8%A6%86%E7%9B%96%E6%8F%90%E9%86%92/"/>
    <id>https://inner.ink/2019/04/19/Centos-cp-去掉覆盖提醒/</id>
    <published>2019-04-19T02:14:50.000Z</published>
    <updated>2019-04-19T10:21:00.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS中cp-f-复制强制覆盖的命令总是无效？"><a href="#CentOS中cp-f-复制强制覆盖的命令总是无效？" class="headerlink" title="CentOS中cp -f 复制强制覆盖的命令总是无效？"></a>CentOS中cp -f 复制强制覆盖的命令总是无效？</h1><hr><p>原因是Linux下默认cp命令是有别名的(alias cp=’cp -i’)，无法在复制时强制覆盖，即使你用 -f 参数也无法强制覆盖文件</p><ul><li>1.取消cp的alias(暂时生效)<br>  <code># unalias cp</code><br>  <code># cp -rf /blog</code></li><li>2.加反斜杠 \cp 执行cp命令时不走alias<br>  <code># \cp -rf /blog</code></li><li>3.interesting的方法<br>  <code># yes|cp -rf /blog</code></li></ul><p>这波操作，大家学会了没？学会的扣1，O(∩_∩)O哈哈~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CentOS中cp-f-复制强制覆盖的命令总是无效？&quot;&gt;&lt;a href=&quot;#CentOS中cp-f-复制强制覆盖的命令总是无效？&quot; class=&quot;headerlink&quot; title=&quot;CentOS中cp -f 复制强制覆盖的命令总是无效？&quot;&gt;&lt;/a&gt;CentOS中
      
    
    </summary>
    
      <category term="Linux" scheme="https://inner.ink/categories/Linux/"/>
    
    
      <category term="CentOs" scheme="https://inner.ink/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://inner.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>经典游戏贪吃蛇Snake</title>
    <link href="https://inner.ink/2018/08/24/%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F%E8%B4%AA%E5%90%83%E8%9B%87Snake/"/>
    <id>https://inner.ink/2018/08/24/经典游戏贪吃蛇Snake/</id>
    <published>2018-08-24T05:42:31.000Z</published>
    <updated>2019-04-13T01:13:58.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="H5小游戏100例-贪吃蛇"><a href="#H5小游戏100例-贪吃蛇" class="headerlink" title="H5小游戏100例: 贪吃蛇"></a>H5小游戏100例: 贪吃蛇</h1><p>贪吃蛇的经典玩法有两种：</p><ol><li>积分闯关</li><li>一吃到底</li></ol><p>第一种是笔者小时候在掌上游戏机最先体验到的（不小心暴露了年龄），具体玩法是蛇吃完一定数量的食物后就通关，通关后速度会加快；第二种是诺基亚在1997年在其自家手机上安装的游戏，它的玩法是吃到没食物为止。笔者要实现的就是第二种玩法。</p><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p>基于贪吃蛇的经典，笔者在实现它时也使用一种经典的设计模型：MVC（即：Model - View - Control）。游戏的各种状态与数据结构由 Model 来管理；View 用于显示 Model 的变化；用户与游戏的交互由 Control 完成（Control 提供各种游戏API接口）。</p><p>Model 是游戏的核心也是本文的主要内容；View 会涉及到部分性能问题；Control 负责业务逻辑。 这样设计的好处是： Model完全独立，View 是 Model 的状态机，Model 与 View 都由 Control 来驱动。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>看一张贪吃蛇的经典图片。  </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170922_nokia.png?v=1" alt="诺基亚"></p><p>贪吃蛇有四个关键的参与对象：</p><ol><li>蛇（snake）</li><li>食物（food）</li><li>墙（bounds）</li><li>舞台（zone）</li></ol><p>舞台是一个 <code>m * n</code>  的矩阵（二维数组），矩阵的索引边界是舞台的墙，矩阵上的成员用于标记食物和蛇的位置。</p><p>空舞台如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>食物（F）和蛇（S）出现在舞台上：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,F,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>由于操作二维数组不如一维数组方便，所以笔者使用的是一维数组， 如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,F,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>舞台矩阵上蛇与食物只是舞台对二者的映射，它们彼此都有独立的数据结构：</p><ul><li>蛇是一串坐标索引链表；</li><li>食物是一个指向舞台坐标的索引值。</li></ul><h3 id="蛇的活动"><a href="#蛇的活动" class="headerlink" title="蛇的活动"></a>蛇的活动</h3><p>蛇的活动有三种，如下：</p><ul><li>移动（move）</li><li>吃食（eat）</li><li>碰撞（collision）</li></ul><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>蛇在移动时，内部发生了什么变化？ </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170922_snake.gif" alt="蠕动"> </p><p>蛇链表在一次移动过程中做了两件事：<strong>向表头插入一个新节点，同时剔除表尾一个旧节点</strong>。用一个数组来代表蛇链表，那么蛇的移动就是以下的伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">snake.pop() &amp; snake.unshift(next); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>数组作为蛇链表合适吗？</strong><br>这是笔者最开始思考的问题，毕竟数组的 <code>unshift &amp; pop</code> 可以无缝表示蛇的移动。不过，方便不代表性能好，<code>unshift</code> 向数组插入元素的时间复杂度是 O(n)， <code>pop</code> 剔除数组尾元素的时间复杂度是 O(1)。</p><p>蛇的移动是一个高频率的动作，如果一次动作的算法复杂度为 O(n) 并且蛇的长度比较大，那么游戏的性能会有问题。笔者想实现的贪吃蛇理论上讲是一条长蛇，所以笔者在本文章的回复是 —— <strong>数组不适合作为蛇链表</strong>。</p><p><strong>蛇链表必须是真正的链表结构。</strong><br>链表删除或插入一个节点的时间复杂度为O(1)，用链表作为蛇链表的数据结构能提高游戏的性能。javascript 没有现成的链表结构，笔者写了一个叫 <a href="https://github.com/leeenx/es6-utils#chain" target="_blank" rel="noopener">Chain</a> 的链表类，<code>Chain</code> 提供了 <code>unshfit &amp; pop</code>。以下伪代码是创建一条蛇链表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> snake = <span class="keyword">new</span> Chain();</span><br></pre></td></tr></table></figure><p><em>由于篇幅问题这里就不介绍 <code>Chain</code> 是如何实现的，有兴趣的同学可以移步到: <a href="https://github.com/leeenx/es6-utils#chain" target="_blank" rel="noopener">https://github.com/leeenx/es6-utils#chain</a></em></p><h4 id="吃食-amp-碰撞"><a href="#吃食-amp-碰撞" class="headerlink" title="吃食 &amp; 碰撞"></a>吃食 &amp; 碰撞</h4><p>「吃食」与「碰撞」区别在于吃食撞上了「食物」，碰撞撞上了「墙」。笔者认为「吃食」与「碰撞」属于蛇一次「移动」的三个可能结果的两个分支。蛇移动的三个可能结果是：「前进」、「吃食」和「碰撞」。</p><p>回头看一下蛇移动的伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">snake.pop() &amp; snake.unshift(next); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中的 <code>next</code> 表示蛇头即将进入的格子的索引值，只有当这个格子是<code>0</code>时蛇才能「前进」，当这个格子是 <code>S</code> 表示「碰撞」自己，当这个格子是 <code>F</code>表示吃食。</p><p><strong>好像少了撞墙？</strong><br>笔者在设计过程中，并没有把墙设计在舞台的矩阵中，而是通过索引出界的方式来表示撞墙。简单地说就是 <code>next === -1</code> 时表示出界和撞墙。</p><p>以下伪代码表示蛇的整上活动过程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B 表示撞墙</span></span><br><span class="line"><span class="keyword">let</span> cell = <span class="number">-1</span> === next ? B : zone[next]; </span><br><span class="line"><span class="keyword">switch</span>(cell) &#123;</span><br><span class="line"><span class="comment">// 吃食</span></span><br><span class="line"><span class="keyword">case</span> F: eat(); <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 撞到自己</span></span><br><span class="line"><span class="keyword">case</span> S: collision(S); <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 撞墙</span></span><br><span class="line"><span class="keyword">case</span> B: collision(B): <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line"><span class="keyword">default</span>: move; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="随机投食"><a href="#随机投食" class="headerlink" title="随机投食"></a>随机投食</h3><p>随机投食是指随机挑选舞台的一个索引值用于映射食物的位置。这似乎很简单，可以直接这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">food = <span class="built_in">Math</span>.random(zone.length) &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>如果考虑到投食的前提 —— 不与蛇身重叠，你会发现上面的随机代码并不能保证投食位置不与蛇身重叠。由于这个算法的安全性带有赌博性质，且把它称作「赌博算法」。为了保证投食的安全性，笔者把算法扩展了一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> index = <span class="built_in">Math</span>.random(zone.length) &gt;&gt; <span class="number">0</span>; </span><br><span class="line"><span class="comment">// 当前位置是否被占用</span></span><br><span class="line"><span class="keyword">return</span> zone[index] === S ? feed() : index; </span><br><span class="line">&#125;</span><br><span class="line">food = feed();</span><br></pre></td></tr></table></figure></p><p>上面的代码虽然在理论上可以保证投食的绝对安全，不过笔者把这个算法称作「不要命的赌徒算法」，因为上面的算法有致命的BUG —— 超长递归 or 死循环。</p><p>为了解决上面的致命问题，笔者设计了下面的算法来做随机投食：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 未被占用的空格数</span></span><br><span class="line"><span class="keyword">let</span> len = zone.length - snake.length; </span><br><span class="line"><span class="comment">// 无法投食</span></span><br><span class="line"><span class="keyword">if</span>(len === <span class="number">0</span>) <span class="keyword">return</span> ; </span><br><span class="line"><span class="comment">// zone的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>, </span><br><span class="line"><span class="comment">// 空格计数器</span></span><br><span class="line">count = <span class="number">0</span>, </span><br><span class="line"><span class="comment">// 第 rnd 个空格子是最终要投食的位置</span></span><br><span class="line">rnd = <span class="built_in">Math</span>.random() * count &gt;&gt; <span class="number">0</span> + <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 累计空格数</span></span><br><span class="line"><span class="keyword">while</span>(count !== rnd) &#123;</span><br><span class="line"><span class="comment">// 当前格子为空，count总数增一</span></span><br><span class="line">zone[index++] === <span class="number">0</span> &amp;&amp; ++count; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index - <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">food = feed();</span><br></pre></td></tr></table></figure></p><p>这个算法的平均复杂度为 O(n/2)。由于投食是一个低频操作，所以 O(n/2)的复杂度并不会带来任何性能问题。不过，笔者觉得这个算法的复杂度还是有点高了。回头看一下最开始的「赌博算法」，虽然「赌博算法」很不靠谱，但是它有一个优势 —— 时间复杂度为 O(1)。 </p><p>「赌博算法」的靠谱概率 = (zone.length - snake.length) / zone.length。<code>snake.length</code> 是一个动态值，它的变化范围是：<code>0 ~ zone.length</code>。推导出「赌博算法」的平均靠谱概率是：</p><blockquote><p><strong>「赌博算法」平均靠谱概率 = 50%</strong></p></blockquote><p>看来「赌博算法」还是可以利用一下的。于是笔者重新设计了一个算法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> rnd = <span class="built_in">Math</span>.random() * zone.length &gt;&gt; <span class="number">0</span>; </span><br><span class="line"><span class="keyword">return</span> zone[rnd] === <span class="number">0</span> ? rnd : <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">food = bet(); </span><br><span class="line"><span class="keyword">if</span>(food === <span class="number">-1</span>) food = feed();</span><br></pre></td></tr></table></figure></p><p>新算法的平均复杂度可以有效地降低到 O(n/4)，人生有时候需要点运气 : )。</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>在 View 可以根据喜好选择一款游戏渲染引擎，笔者在 View 层选择了 <code>PIXI</code> 作为游戏游戏渲染引擎。</p><p>View 的任务主要有两个：</p><ol><li>绘制游戏的界面；</li><li>渲染 Model 里的各种数据结构</li></ol><p>也就是说 View 是使用渲染引擎还原设计稿的过程。本文的目的是介绍「贪吃蛇」的实现思路，如何使用一个渲染引擎不是本文讨论的范畴，笔者想介绍的是：「如何提高渲染的效率」。</p><p>在 View 中显示 Model 的蛇可以简单地如以下伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空 View 上的蛇</span></span><br><span class="line">view.snake.clean(); </span><br><span class="line">model.snake.forEach(</span><br><span class="line">(node) =&gt; &#123;</span><br><span class="line"><span class="comment">// 创建 View 上的蛇节点</span></span><br><span class="line"><span class="keyword">let</span> viewNode = createViewNode(node); </span><br><span class="line"><span class="comment">// 并合一条新蛇</span></span><br><span class="line">view.snake.push(viewNode); </span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>上面代码的时间复杂度是 O(n)。上面介绍过蛇的移动是一个高频的活动，我们要尽量避免高频率地运行 O(n) 的代码。来分析蛇的三种活动：「移动」，「吃食」，「碰撞」。</p><p>首先，Model 发生了「碰撞」，View 应该是直接暂停渲染 Model 里的状态，游戏处在死亡状态，接下来的事由 Control 处理。</p><p>Model 中的蛇（链表）在一次「移动」过程中做了两件事：<strong>向表头插入一个新节点，同时剔除表尾一个旧节点</strong>；蛇（链表）在一次「吃食」过程中只做一件事：<strong>向表头插入一个新节点</strong>。</p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170923_before_after.png" alt="对比"> </p><p>如果在 View 中对 Model 的蛇链表做差异化检查，View 只增量更新差异部分的话，算法的时间复杂度即可降低至 O(1) ~ O(2) 。以下是优化后的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> snakeA = model.snake, snakeB = view.snake; </span><br><span class="line"><span class="comment">// 增量更新尾部</span></span><br><span class="line"><span class="keyword">while</span>(snakeB.length &lt;= snakeA.length) &#123; </span><br><span class="line">headA = snakeA.next(); </span><br><span class="line"><span class="comment">// 头节点匹配</span></span><br><span class="line"><span class="keyword">if</span>(headA.data === headB.data) <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 不匹配</span></span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line"><span class="comment">// 向snakeB插入头节点</span></span><br><span class="line"><span class="keyword">if</span>(snakeA.HEAD === headA.index) &#123;</span><br><span class="line">snakeB.unshift(headA.data); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向snakeB插入第二个节点</span></span><br><span class="line"><span class="keyword">else</span> snakeB.insertAfter(<span class="number">0</span>, headA.data); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增量更新头部 </span></span><br><span class="line"><span class="keyword">let</span> tailA = snakeA.last(), tailB; </span><br><span class="line"><span class="keyword">while</span>(snakeB.length !== <span class="number">0</span>) &#123; </span><br><span class="line">tailB = snakeB.last(); </span><br><span class="line"><span class="comment">// 尾节点匹配</span></span><br><span class="line"><span class="keyword">if</span>(tailA.data === tailB.data) <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 不匹配</span></span><br><span class="line"><span class="keyword">else</span> snakeB.pop(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><p>Control 主要做 3 件事：</p><ol><li>游戏与用户的互动 </li><li>驱动 Model </li><li>同步 View 与 Model </li></ol><p>「游戏与用户的互动」是指向外提供游戏过程需要使用到的 APIs 与 各类事件。笔者规划的 APIs 如下：</p><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">type</th><th style="text-align:left">detail</th></tr></thead><tbody><tr><td style="text-align:left">init</td><td style="text-align:left">method</td><td style="text-align:left">初始化游戏</td></tr><tr><td style="text-align:left">start</td><td style="text-align:left">method</td><td style="text-align:left">开始游戏</td></tr><tr><td style="text-align:left">restart</td><td style="text-align:left">method</td><td style="text-align:left">重新开始游戏</td></tr><tr><td style="text-align:left">pause</td><td style="text-align:left">method</td><td style="text-align:left">暂停</td></tr><tr><td style="text-align:left">resume</td><td style="text-align:left">method</td><td style="text-align:left">恢复</td></tr><tr><td style="text-align:left">turn</td><td style="text-align:left">method</td><td style="text-align:left">控制蛇的转向。如：turn(“left”)</td></tr><tr><td style="text-align:left">destroy</td><td style="text-align:left">method</td><td style="text-align:left">销毁游戏</td></tr><tr><td style="text-align:left">speed</td><td style="text-align:left">property</td><td style="text-align:left">蛇的移动速度</td></tr></tbody></table><p>事件如下：</p><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">detail</th></tr></thead><tbody><tr><td style="text-align:left">countdown</td><td style="text-align:left">倒时计</td></tr><tr><td style="text-align:left">eat</td><td style="text-align:left">吃到食物</td></tr><tr><td style="text-align:left">before-eat</td><td style="text-align:left">吃到食物前触发</td></tr><tr><td style="text-align:left">gameover</td><td style="text-align:left">游戏结束</td></tr></tbody></table><p>事件统一挂载在游戏实例下的 <code>event</code> 对象下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snake.event.on(<span class="string">"countdown"</span>, (time) =&gt; <span class="built_in">console</span>.log(<span class="string">"剩余时间："</span>, time));</span><br></pre></td></tr></table></figure></p><p>「驱动 Model 」只做一件事 —— <strong>将 Model 的蛇的方向更新为用户指定的方向</strong>。<br>「同步 View 与 Model 」也比较简单，检查 Model 是否有更新，如果有更新通知 View 更新游戏界面。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文转载自：<a href="https://github.com/leeenx/snake" target="_blank" rel="noopener">https://github.com/leeenx/snake</a></p><p>下面是本文介绍的贪吃蛇的线上 <a href="https://leeenx.github.io/snake/src/snake.html" target="_blank" rel="noopener">DEMO</a> 的二维码： </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170923_qr.png" alt="demo"> </p><p>游戏的源码托管在：<a href="https://github.com/leeenx/snake" target="_blank" rel="noopener">https://github.com/leeenx/snake</a></p><p>感谢耐心阅读完本文章的读者。本文仅代表笔者的个人观点，如有不妥之处请不吝赐教。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;H5小游戏100例-贪吃蛇&quot;&gt;&lt;a href=&quot;#H5小游戏100例-贪吃蛇&quot; class=&quot;headerlink&quot; title=&quot;H5小游戏100例: 贪吃蛇&quot;&gt;&lt;/a&gt;H5小游戏100例: 贪吃蛇&lt;/h1&gt;&lt;p&gt;贪吃蛇的经典玩法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="javascript" scheme="https://inner.ink/categories/javascript/"/>
    
    
      <category term="github" scheme="https://inner.ink/tags/github/"/>
    
      <category term="javascript" scheme="https://inner.ink/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>用hexo和github搭建个人博客小站全攻略</title>
    <link href="https://inner.ink/2018/08/20/%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%AB%99%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://inner.ink/2018/08/20/用hexo和github搭建个人博客小站全攻略/</id>
    <published>2018-08-20T00:58:52.000Z</published>
    <updated>2019-04-13T01:13:58.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何用hexo与github搭建一个属于你自己的个人博客站点呢？"><a href="#如何用hexo与github搭建一个属于你自己的个人博客站点呢？" class="headerlink" title="如何用hexo与github搭建一个属于你自己的个人博客站点呢？"></a>如何用hexo与github搭建一个属于你自己的个人博客站点呢？</h1><hr><h2 id="一-了解hexo与github"><a href="#一-了解hexo与github" class="headerlink" title="一.了解hexo与github"></a>一.了解hexo与github</h2><h3 id="1-hexo是什么？"><a href="#1-hexo是什么？" class="headerlink" title="1.hexo是什么？"></a>1.hexo是什么？</h3><blockquote><p><strong><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a> 是一个快速、简洁且高效的博客框架。</strong>Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="2-github是什么？"><a href="#2-github是什么？" class="headerlink" title="2.github是什么？"></a>2.github是什么？</h3><blockquote><ul><li>1.<strong>gitHub是一个面向开源及私有软件项目的托管平台</strong>，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</li><li>2.一个<strong>博客网站</strong>建立好之后，想让所有人去访问，必须要有<strong>服务器和域名</strong>，仅仅在你的电脑上运行是远远不够的，而服务器和域名需要购买和备案(国内)，这其中要不但要花钱还要花时间去备案，所以对于一个博客站点来说，这些代价无疑是巨大的。</li><li>3.<strong>github是免费的</strong>，可以把你写好的博客网站托管在github上边，通过<strong>Github Pages</strong>实现个人网站。</li><li>4.<strong>Github Pages是Github免费提供给开发者的一款托管个人网站的产品</strong>，它可以免费提供一个域名<code>username.github.io</code>去访问你的博客网站，而<code>username</code>就是你在注册github的用户名，至于更详细的内容请接着往下看。</li><li>5.我的小站：<a href="https://pengqiangsheng.github.io" target="_blank" rel="noopener">pengqiangsheng.github.io</a></li></ul></blockquote><h3 id="3-如何安装？"><a href="#3-如何安装？" class="headerlink" title="3.如何安装？"></a>3.如何安装？</h3><blockquote><p>安装hexo前，首先检查你的电脑是否安装下列应用程序：<br>1.<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>2.<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a><br>安装Node.js和Git之后我们可以运行使用<kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，然后输入<code>cmd</code>进入命令提示符：<br><code>$ node --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/1.png" alt=""><br>如果看到上述内容说明Node.js已经安装成功了<br><code>$ git --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/2.png" alt=""><br>如果看到上述内容说明git已经安装成功了<br>如果出现提示“不是内部或外部命令…”请看第5点的注意事项</p></blockquote><h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h3><blockquote><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo<br><code>$ npm install -g hexo-cli</code><br>等待安装完成后<br><code>$ hexo --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/3.png" alt=""><br>看到这些信息说明hexo安装完成</p></blockquote><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><blockquote><p>1.如果出现提示“node不是内部或外部命令，也不是可运行的程序或批处理文件”此类的提示可能有两个原因</p></blockquote><blockquote><ul><li>环境变量<br> 百度“xxx环境变量如何添加”</li><li>管理员权限的命令提示符<br> 如果环境变量添加完成后还是不行，请运行管理员权限的命令提示符</li></ul></blockquote><blockquote><p>2.关于想Node.js与Git的更深入的了解的小伙伴可以自行百度</p></blockquote><h2 id="二-Hexo建站"><a href="#二-Hexo建站" class="headerlink" title="二.Hexo建站"></a>二.Hexo建站</h2><h3 id="1-在你电脑的一个你熟悉的位置新建一个文件夹hexo"><a href="#1-在你电脑的一个你熟悉的位置新建一个文件夹hexo" class="headerlink" title="1.在你电脑的一个你熟悉的位置新建一个文件夹hexo"></a>1.在你电脑的一个你熟悉的位置新建一个文件夹hexo</h3><blockquote><p><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/4.png" alt=""></p></blockquote><h3 id="2-在命令提示符中进入这个文件夹后执行hexo-init"><a href="#2-在命令提示符中进入这个文件夹后执行hexo-init" class="headerlink" title="2.在命令提示符中进入这个文件夹后执行hexo init"></a>2.在命令提示符中进入这个文件夹后执行hexo init</h3><blockquote><p><code>$ hexo init</code>耐心等待一小会时间<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-1.png" alt=""><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-2.png" alt=""><br>如果看到以上信息说明hexo init成功了，接着打开刚刚创建的文件夹，可以看到这样的目录结构：<br>hexo<br>|–node_modules<br>|–scaffolds<br>|–source(存放文章)<br>|–themes(主题)<br>|—-.gitignore<br>|—-config.yml(站点配置文件)<br>|—-db.json<br>|—-package.json<br>|—-package-lock.json<br>这里对hexo目录就不进行太多的讲解<br>需要详细了解的朋友，请转到: <strong><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档|hexo</a></strong><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-3.png" alt=""></p></blockquote><h3 id="3-部署你的博客网站到本地进行预览"><a href="#3-部署你的博客网站到本地进行预览" class="headerlink" title="3.部署你的博客网站到本地进行预览"></a>3.部署你的博客网站到本地进行预览</h3><blockquote><p>按照顺序三步走</p></blockquote><blockquote><ul><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>$ hexo clean</code></li><li>生成静态页面至public目录<br><code>$ hexo generate</code></li><li>开启预览访问端口（默认端口4000，’ctrl + c’关闭server)<br><code>$ hexo server</code></li></ul></blockquote><h3 id="4-打开浏览器"><a href="#4-打开浏览器" class="headerlink" title="4.打开浏览器"></a>4.打开浏览器</h3><blockquote><p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>访问后，应该可以看到如下页面，说明你的博客小站搭建成功了！<br>这个页面的主题是hexo官方自带主题landscape<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-4.png" alt=""></p></blockquote><h3 id="5-主题配置"><a href="#5-主题配置" class="headerlink" title="5.主题配置"></a>5.主题配置</h3><blockquote><p>这里呢，我推荐使用<strong><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a></strong></p></blockquote><blockquote><ul><li>进入hexo根目录<br><code>$ cd your-hexo-site</code></li><li>使用git clone下载Next主题到thems文件夹下<br><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li></ul></blockquote><blockquote><p>等待下载完成后可以在hexo/themes文件夹下看到：<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/next.png" alt=""><br>打开hexo根目录下的config.yml文件<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/hexo-config.png" alt=""><br>找到字段<code>theme: landscape</code><br>把<code>landscape</code>换成<code>next</code>，然后保存<br>接着按照部署到本地的方法执行这三步<br><code>$ hexo clean</code><br><code>$ hexo generate</code><br><code>$ hexo server</code><br>然后打开你的浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>你会神奇的发现主题已经换成next的简约风格<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-6.png" alt=""></p></blockquote><h3 id="6-更多关于Next主题的内容"><a href="#6-更多关于Next主题的内容" class="headerlink" title="6.更多关于Next主题的内容"></a>6.更多关于Next主题的内容</h3><blockquote><p>请访问：<strong><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></strong></p></blockquote><h2 id="三-在Github上托管hexo博客"><a href="#三-在Github上托管hexo博客" class="headerlink" title="三.在Github上托管hexo博客"></a>三.在Github上托管hexo博客</h2><h3 id="1-注册github账号"><a href="#1-注册github账号" class="headerlink" title="1.注册github账号"></a>1.注册github账号</h3><blockquote><p>访问<a href="https://github.com/" target="_blank" rel="noopener">github</a><br>输入账号，邮箱，密码进行注册<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-1.png" alt=""></p></blockquote><h3 id="2-新建一个项目"><a href="#2-新建一个项目" class="headerlink" title="2.新建一个项目"></a>2.新建一个项目</h3><blockquote><p><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-2.png" alt=""></p></blockquote><h3 id="3-配置项目信息"><a href="#3-配置项目信息" class="headerlink" title="3.配置项目信息"></a>3.配置项目信息</h3><blockquote><p>注意项目名字格式必须是:<code>username.github.io</code><br><code>username</code>就是你注册时的用户名<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-5.png" alt=""></p></blockquote><h3 id="4-创建好之后来到项目页面"><a href="#4-创建好之后来到项目页面" class="headerlink" title="4.创建好之后来到项目页面"></a>4.创建好之后来到项目页面</h3><blockquote><p>复制一下https的项目地址<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-6.png" alt=""></p></blockquote><h3 id="5-上传本地hexo博客项目到github上"><a href="#5-上传本地hexo博客项目到github上" class="headerlink" title="5.上传本地hexo博客项目到github上"></a>5.上传本地hexo博客项目到github上</h3><blockquote><p>有两种方式，一种是https传输，另一种是ssh秘钥传输</p></blockquote><blockquote><ul><li>https传输<br>这种方式流程较为简单，但每次上传代码都需要输入github账号和密码</li><li>ssh秘钥传输<br>这种方式配置流程比较复杂，但配置完成后上传代码更为便捷</li></ul></blockquote><h4 id="5-1-https方式上传代码"><a href="#5-1-https方式上传代码" class="headerlink" title="5.1 https方式上传代码"></a>5.1 https方式上传代码</h4><blockquote><p>打开hexo根目录下的config.yml文件<br>找到<code>deploy:</code>字段，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Johnlly/johnlly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>repo后填的参数就是你的项目地址，然后保存<br>打开命令提示符进入hexo目录<br><code>$ hexo deploy</code>既可把本地代码上传至github<br>如果出现ERROR Deployer not found: git<br>请先执行<code>npm install --save hexo-deployer-git</code><br>然后再<code>$ hexo deploy</code><br>执行过程中会让你输入github的账号和密码<br>账号密码验证成功后提示以下信息说明上传代码成功<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-7.png" alt=""></p></blockquote><h4 id="5-2-ssh秘钥传输"><a href="#5-2-ssh秘钥传输" class="headerlink" title="5.2 ssh秘钥传输"></a>5.2 ssh秘钥传输</h4><h5 id="5-2-1-检查本机现有的ssh秘钥"><a href="#5-2-1-检查本机现有的ssh秘钥" class="headerlink" title="5.2.1 检查本机现有的ssh秘钥"></a>5.2.1 检查本机现有的ssh秘钥</h5><blockquote><p>输入以下两条命令查看你是否有名为id_rsa和id_dsa.pub的2个文件<br>如果没有转到步骤2，否则请跳到第3步<br><code>$ cd ~/.ssh</code><br><code>$ ls</code></p></blockquote><h5 id="5-2-2-创建一个新的ssh秘钥"><a href="#5-2-2-创建一个新的ssh秘钥" class="headerlink" title="5.2.2 创建一个新的ssh秘钥"></a>5.2.2 创建一个新的ssh秘钥</h5><blockquote><p><code>$ ssh-keygen -t rsa -C &quot;注册Github用的邮箱&quot;</code><br>输入命令后遇到需要你输入的时候，请按回车键，一共三次回车。<br>现在你已经生成了一个ssh秘钥了</p></blockquote><h5 id="5-2-3-将你的SSH-key添加到GitHub-或者别的托管平台"><a href="#5-2-3-将你的SSH-key添加到GitHub-或者别的托管平台" class="headerlink" title="5.2.3 将你的SSH key添加到GitHub(或者别的托管平台)"></a>5.2.3 将你的SSH key添加到GitHub(或者别的托管平台)</h5><blockquote><p><code>$ clip &lt; ~/.ssh/id_rsa.pub</code><br>运行这条命令可以将秘钥的内容复制到剪切板<br>然后打开github，添加ssh秘钥<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-10.png" alt=""></p></blockquote><h5 id="5-2-4-测试ssh秘钥是否成功添加到GitHub"><a href="#5-2-4-测试ssh秘钥是否成功添加到GitHub" class="headerlink" title="5.2.4 测试ssh秘钥是否成功添加到GitHub"></a>5.2.4 测试ssh秘钥是否成功添加到GitHub</h5><blockquote><p><code>$ ssh -T git@github.com</code>注意就是运行此命令<br>执行过程中会有如下提示，选择yes即可<br>Are you sure you want to continue connecting (yes/no)? <strong>yes</strong><br>你会看到如下有关成功的标志<br>You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h5 id="5-2-5-用ssh方式上传代码至GitHub"><a href="#5-2-5-用ssh方式上传代码至GitHub" class="headerlink" title="5.2.5 用ssh方式上传代码至GitHub"></a>5.2.5 用ssh方式上传代码至GitHub</h5><blockquote><p>打开hexo根目录下的config.yml文件<br>找到<code>deploy:</code>字段，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:johnlly/johnlly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>打开命令提示符进入hexo目录<br>执行<code>$ hexo deploy</code>即可上传</p></blockquote><h4 id="5-3-打开你的github项目页面"><a href="#5-3-打开你的github项目页面" class="headerlink" title="5.3 打开你的github项目页面"></a>5.3 打开你的github项目页面</h4><blockquote><p>看到如下信息,你的博客代码已经成功的托管在github上了<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-8.png" alt=""></p></blockquote><h4 id="5-4-打开浏览器"><a href="#5-4-打开浏览器" class="headerlink" title="5.4 打开浏览器"></a>5.4 打开浏览器</h4><blockquote><p>输入<code>username.github.io</code>，<code>username</code>就是你的github用户名<br>例如我的<a href="https://johnlly.github.io/" target="_blank" rel="noopener">https://johnlly.github.io/</a>可以访问到页面<br>至此就大功告成了，剩下的就是主题的配置和文章的撰写了<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-9.png" alt=""></p></blockquote><h4 id="后续更新…"><a href="#后续更新…" class="headerlink" title="后续更新…"></a>后续更新…</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何用hexo与github搭建一个属于你自己的个人博客站点呢？&quot;&gt;&lt;a href=&quot;#如何用hexo与github搭建一个属于你自己的个人博客站点呢？&quot; class=&quot;headerlink&quot; title=&quot;如何用hexo与github搭建一个属于你自己的个人博客
      
    
    </summary>
    
      <category term="hexo" scheme="https://inner.ink/categories/hexo/"/>
    
    
      <category term="github" scheme="https://inner.ink/tags/github/"/>
    
      <category term="hexo" scheme="https://inner.ink/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo生成博文插入图片的办法</title>
    <link href="https://inner.ink/2018/08/17/hexo%E7%94%9F%E6%88%90%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>https://inner.ink/2018/08/17/hexo生成博文插入图片的办法/</id>
    <published>2018-08-17T09:43:48.000Z</published>
    <updated>2019-04-13T01:13:58.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo生成博文插入图片的办法"><a href="#hexo生成博文插入图片的办法" class="headerlink" title="hexo生成博文插入图片的办法"></a>hexo生成博文插入图片的办法</h1><hr><h2 id="一-首先进入Hexo"><a href="#一-首先进入Hexo" class="headerlink" title="一.首先进入Hexo"></a>一.首先进入Hexo</h2><h3 id="1-把主页配置文件-config-yml-里的post-asset-folder这个选项设置为true"><a href="#1-把主页配置文件-config-yml-里的post-asset-folder这个选项设置为true" class="headerlink" title="1.把主页配置文件_config.yml 里的post_asset_folder这个选项设置为true"></a>1.把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder</code>这个选项设置为<code>true</code></h3><h3 id="2-在你的hexo目录下执行命令"><a href="#2-在你的hexo目录下执行命令" class="headerlink" title="2.在你的hexo目录下执行命令"></a>2.在你的hexo目录下执行命令</h3><blockquote><p><code>$ npm install hexo-asset-image--save</code><br>这是下载安装一个可以上传本地图片的插件，来自<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">CodeFalling</a></p></blockquote><h3 id="3-等待安装完成后"><a href="#3-等待安装完成后" class="headerlink" title="3.等待安装完成后"></a>3.等待安装完成后</h3><blockquote><p>再运行<code>$ hexo new &quot;xxx&quot;</code>来生成md博文时<br>可以看到/source/posts文件夹内除了xxx.md文件还有一个同名的文件夹</p></blockquote><h3 id="4-最后在xxx-md博文中想引入图片时"><a href="#4-最后在xxx-md博文中想引入图片时" class="headerlink" title="4.最后在xxx.md博文中想引入图片时"></a>4.最后在xxx.md博文中想引入图片时</h3><blockquote><p>先把图片复制到xxx这个文件夹中<br>然后只需要在xxx.md中按照markdown的格式引入图片<br><code>![你想输入的替代文字](xxx/图片名.jpg)</code></p></blockquote><h2 id="二-注意事项"><a href="#二-注意事项" class="headerlink" title="二.注意事项"></a>二.注意事项</h2><h3 id="1-路径问题"><a href="#1-路径问题" class="headerlink" title="1.路径问题"></a>1.路径问题</h3><blockquote><p>注意： xxx是这个md文件的名字，也是同名文件夹的名字<br>只需要有文件夹名字即可，不需要有什么绝对路径<br>你想引入的图片就只需要放入xxx这个文件夹内就好了，很像引用相对路径</p></blockquote><h3 id="2-打开Chrome控制台查看图片真正的路径"><a href="#2-打开Chrome控制台查看图片真正的路径" class="headerlink" title="2.打开Chrome控制台查看图片真正的路径"></a>2.打开Chrome控制台查看图片真正的路径</h3><blockquote><p>最后检查一下，<code>$ hexo g</code>生成页面后<br>进入public\2018\08\17\index.html文件中查看相关字段<br>可以发现html标签内的语句是<code>&lt;img src=&quot;2018/08/17/xxx/图片名.jpg&quot;&gt;</code><br>而不是<code>&lt;img src=&quot;xxx/图片名.jpg&gt;</code><br>这很重要,关乎你的网页是否可以真正加载你想插入的图片</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo生成博文插入图片的办法&quot;&gt;&lt;a href=&quot;#hexo生成博文插入图片的办法&quot; class=&quot;headerlink&quot; title=&quot;hexo生成博文插入图片的办法&quot;&gt;&lt;/a&gt;hexo生成博文插入图片的办法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一-首先进入He
      
    
    </summary>
    
      <category term="hexo" scheme="https://inner.ink/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://inner.ink/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>github更新项目</title>
    <link href="https://inner.ink/2018/08/17/github%E6%9B%B4%E6%96%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>https://inner.ink/2018/08/17/github更新项目/</id>
    <published>2018-08-17T08:19:41.000Z</published>
    <updated>2019-04-13T01:13:58.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新github上的项目"><a href="#更新github上的项目" class="headerlink" title="更新github上的项目"></a>更新github上的项目</h1><hr><h2 id="一-克隆代码"><a href="#一-克隆代码" class="headerlink" title="一.克隆代码"></a>一.克隆代码</h2><h3 id="准备工作：1-git客户端-2-github账户"><a href="#准备工作：1-git客户端-2-github账户" class="headerlink" title="准备工作：1.git客户端 2.github账户"></a>准备工作：1.<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git客户端</a> 2.<a href="https://github.com" target="_blank" rel="noopener">github账户</a></h3><h3 id="1-在本地建立一个文件夹，在此处点击右键，选择git-bash-here"><a href="#1-在本地建立一个文件夹，在此处点击右键，选择git-bash-here" class="headerlink" title="1.在本地建立一个文件夹，在此处点击右键，选择git bash here"></a>1.在本地建立一个文件夹，在此处点击右键，选择git bash here</h3><ul><li>进入此文件夹<br><img src="/2018/08/17/github更新项目/1.png" alt=""></li><li>右键选择git bash<br><img src="/2018/08/17/github更新项目/2.png" alt=""></li></ul><h3 id="2-把自己的代码clone到本地，或者clone别人的到本地"><a href="#2-把自己的代码clone到本地，或者clone别人的到本地" class="headerlink" title="2.把自己的代码clone到本地，或者clone别人的到本地"></a>2.把自己的代码clone到本地，或者clone别人的到本地</h3><blockquote><p><code>$ git clone https://github.com/xxx</code><br><img src="/2018/08/17/github更新项目/3.png" alt=""></p></blockquote><h3 id="3-clone完成后查看本地代码"><a href="#3-clone完成后查看本地代码" class="headerlink" title="3.clone完成后查看本地代码"></a>3.clone完成后查看本地代码</h3><p><img src="/2018/08/17/github更新项目/4.png" alt=""></p><h2 id="二-更新代码"><a href="#二-更新代码" class="headerlink" title="二.更新代码"></a>二.更新代码</h2><h3 id="1-新增一个mytest的文件夹，里面有一个my-txt"><a href="#1-新增一个mytest的文件夹，里面有一个my-txt" class="headerlink" title="1.新增一个mytest的文件夹，里面有一个my.txt"></a>1.新增一个mytest的文件夹，里面有一个my.txt</h3><ul><li>新建文件夹 <code>$ mkdir mytest</code><br><img src="/2018/08/17/github更新项目/5.png" alt=""></li><li>创建my.txt <code>$ touch my.txt</code><br><img src="/2018/08/17/github更新项目/6.png" alt=""></li></ul><h3 id="2-使用git-status命令查看状态"><a href="#2-使用git-status命令查看状态" class="headerlink" title="2.使用git status命令查看状态"></a>2.使用git status命令查看状态</h3><h4 id="查看当前git仓库状态，发现有新的文件"><a href="#查看当前git仓库状态，发现有新的文件" class="headerlink" title="查看当前git仓库状态，发现有新的文件"></a>查看当前git仓库状态，发现有新的文件</h4><blockquote><p><code>git status</code><br><img src="/2018/08/17/github更新项目/7.png" alt=""></p></blockquote><h2 id="三-更新代码"><a href="#三-更新代码" class="headerlink" title="三.更新代码"></a>三.更新代码</h2><h3 id="1-使用git-add命令"><a href="#1-使用git-add命令" class="headerlink" title="1.使用git add命令"></a>1.使用git add命令</h3><blockquote><p><code>$ git add *</code> –代表更新全部</p></blockquote><h3 id="2-使用git-commit-m-“更新说明”-commit只是提交到缓存区域"><a href="#2-使用git-commit-m-“更新说明”-commit只是提交到缓存区域" class="headerlink" title="2.使用git commit -m “更新说明”,commit只是提交到缓存区域"></a>2.使用git commit -m “更新说明”,commit只是提交到缓存区域</h3><blockquote><p><code>$ git commit -m &quot;更新说明&quot;</code><br><img src="/2018/08/17/github更新项目/8.png" alt=""></p></blockquote><h3 id="3-如果多人同时开发维护代码，得先git-pull-拉取当前分支最新代码"><a href="#3-如果多人同时开发维护代码，得先git-pull-拉取当前分支最新代码" class="headerlink" title="3.如果多人同时开发维护代码，得先git pull,拉取当前分支最新代码"></a>3.如果多人同时开发维护代码，得先git pull,拉取当前分支最新代码</h3><blockquote><p><code>$ git pull</code><br><img src="/2018/08/17/github更新项目/9.png" alt=""></p></blockquote><h3 id="4-最后git-push-origin-master-最后一步才是push到远程master分支上"><a href="#4-最后git-push-origin-master-最后一步才是push到远程master分支上" class="headerlink" title="4.最后git push origin master,最后一步才是push到远程master分支上"></a>4.最后git push origin master,最后一步才是push到远程master分支上</h3><blockquote><p><code>$git push origin master</code><br><img src="/2018/08/17/github更新项目/10.png" alt=""></p></blockquote><h3 id="5-打开github界面查看到更新状态"><a href="#5-打开github界面查看到更新状态" class="headerlink" title="5.打开github界面查看到更新状态"></a>5.打开github界面查看到更新状态</h3><p><img src="/2018/08/17/github更新项目/11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新github上的项目&quot;&gt;&lt;a href=&quot;#更新github上的项目&quot; class=&quot;headerlink&quot; title=&quot;更新github上的项目&quot;&gt;&lt;/a&gt;更新github上的项目&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一-克隆代码&quot;&gt;&lt;a href=&quot;#一-
      
    
    </summary>
    
      <category term="github" scheme="https://inner.ink/categories/github/"/>
    
    
      <category term="github" scheme="https://inner.ink/tags/github/"/>
    
  </entry>
  
</feed>
