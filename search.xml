<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CentOs cp 去掉覆盖提醒</title>
      <link href="/2019/04/19/Centos-cp-%E5%8E%BB%E6%8E%89%E8%A6%86%E7%9B%96%E6%8F%90%E9%86%92/"/>
      <url>/2019/04/19/Centos-cp-%E5%8E%BB%E6%8E%89%E8%A6%86%E7%9B%96%E6%8F%90%E9%86%92/</url>
      <content type="html"><![CDATA[<h1 id="CentOS中cp-f-复制强制覆盖的命令总是无效？"><a href="#CentOS中cp-f-复制强制覆盖的命令总是无效？" class="headerlink" title="CentOS中cp -f 复制强制覆盖的命令总是无效？"></a>CentOS中cp -f 复制强制覆盖的命令总是无效？</h1><hr><p>原因是Linux下默认cp命令是有别名的(alias cp=’cp -i’)，无法在复制时强制覆盖，即使你用 -f 参数也无法强制覆盖文件</p><ul><li>1.取消cp的alias(暂时生效)<br>  <code># unalias cp</code><br>  <code># cp -rf /blog</code></li><li>2.加反斜杠 \cp 执行cp命令时不走alias<br>  <code># \cp -rf /blog</code></li><li>3.interesting的方法<br>  <code># yes|cp -rf /blog</code></li></ul><p>这波操作，大家学会了没？学会的扣1，O(∩_∩)O哈哈~<br>1000</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>经典游戏贪吃蛇Snake</title>
      <link href="/2018/08/24/%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F%E8%B4%AA%E5%90%83%E8%9B%87Snake/"/>
      <url>/2018/08/24/%E7%BB%8F%E5%85%B8%E6%B8%B8%E6%88%8F%E8%B4%AA%E5%90%83%E8%9B%87Snake/</url>
      <content type="html"><![CDATA[<h1 id="H5小游戏100例-贪吃蛇"><a href="#H5小游戏100例-贪吃蛇" class="headerlink" title="H5小游戏100例: 贪吃蛇"></a>H5小游戏100例: 贪吃蛇</h1><p>贪吃蛇的经典玩法有两种：</p><ol><li>积分闯关</li><li>一吃到底</li></ol><p>第一种是笔者小时候在掌上游戏机最先体验到的（不小心暴露了年龄），具体玩法是蛇吃完一定数量的食物后就通关，通关后速度会加快；第二种是诺基亚在1997年在其自家手机上安装的游戏，它的玩法是吃到没食物为止。笔者要实现的就是第二种玩法。</p><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p>基于贪吃蛇的经典，笔者在实现它时也使用一种经典的设计模型：MVC（即：Model - View - Control）。游戏的各种状态与数据结构由 Model 来管理；View 用于显示 Model 的变化；用户与游戏的交互由 Control 完成（Control 提供各种游戏API接口）。</p><p>Model 是游戏的核心也是本文的主要内容；View 会涉及到部分性能问题；Control 负责业务逻辑。 这样设计的好处是： Model完全独立，View 是 Model 的状态机，Model 与 View 都由 Control 来驱动。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>看一张贪吃蛇的经典图片。  </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170922_nokia.png?v=1" alt="诺基亚"></p><p>贪吃蛇有四个关键的参与对象：</p><ol><li>蛇（snake）</li><li>食物（food）</li><li>墙（bounds）</li><li>舞台（zone）</li></ol><p>舞台是一个 <code>m * n</code>  的矩阵（二维数组），矩阵的索引边界是舞台的墙，矩阵上的成员用于标记食物和蛇的位置。</p><p>空舞台如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>食物（F）和蛇（S）出现在舞台上：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,F,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>由于操作二维数组不如一维数组方便，所以笔者使用的是一维数组， 如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,F,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,S,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>舞台矩阵上蛇与食物只是舞台对二者的映射，它们彼此都有独立的数据结构：</p><ul><li>蛇是一串坐标索引链表；</li><li>食物是一个指向舞台坐标的索引值。</li></ul><h3 id="蛇的活动"><a href="#蛇的活动" class="headerlink" title="蛇的活动"></a>蛇的活动</h3><p>蛇的活动有三种，如下：</p><ul><li>移动（move）</li><li>吃食（eat）</li><li>碰撞（collision）</li></ul><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>蛇在移动时，内部发生了什么变化？ </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170922_snake.gif" alt="蠕动"> </p><p>蛇链表在一次移动过程中做了两件事：<strong>向表头插入一个新节点，同时剔除表尾一个旧节点</strong>。用一个数组来代表蛇链表，那么蛇的移动就是以下的伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">snake.pop() &amp; snake.unshift(next); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>数组作为蛇链表合适吗？</strong><br>这是笔者最开始思考的问题，毕竟数组的 <code>unshift &amp; pop</code> 可以无缝表示蛇的移动。不过，方便不代表性能好，<code>unshift</code> 向数组插入元素的时间复杂度是 O(n)， <code>pop</code> 剔除数组尾元素的时间复杂度是 O(1)。</p><p>蛇的移动是一个高频率的动作，如果一次动作的算法复杂度为 O(n) 并且蛇的长度比较大，那么游戏的性能会有问题。笔者想实现的贪吃蛇理论上讲是一条长蛇，所以笔者在本文章的回复是 —— <strong>数组不适合作为蛇链表</strong>。</p><p><strong>蛇链表必须是真正的链表结构。</strong><br>链表删除或插入一个节点的时间复杂度为O(1)，用链表作为蛇链表的数据结构能提高游戏的性能。javascript 没有现成的链表结构，笔者写了一个叫 <a href="https://github.com/leeenx/es6-utils#chain" target="_blank" rel="noopener">Chain</a> 的链表类，<code>Chain</code> 提供了 <code>unshfit &amp; pop</code>。以下伪代码是创建一条蛇链表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> snake = <span class="keyword">new</span> Chain();</span><br></pre></td></tr></table></figure><p><em>由于篇幅问题这里就不介绍 <code>Chain</code> 是如何实现的，有兴趣的同学可以移步到: <a href="https://github.com/leeenx/es6-utils#chain" target="_blank" rel="noopener">https://github.com/leeenx/es6-utils#chain</a></em></p><h4 id="吃食-amp-碰撞"><a href="#吃食-amp-碰撞" class="headerlink" title="吃食 &amp; 碰撞"></a>吃食 &amp; 碰撞</h4><p>「吃食」与「碰撞」区别在于吃食撞上了「食物」，碰撞撞上了「墙」。笔者认为「吃食」与「碰撞」属于蛇一次「移动」的三个可能结果的两个分支。蛇移动的三个可能结果是：「前进」、「吃食」和「碰撞」。</p><p>回头看一下蛇移动的伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">snake.pop() &amp; snake.unshift(next); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中的 <code>next</code> 表示蛇头即将进入的格子的索引值，只有当这个格子是<code>0</code>时蛇才能「前进」，当这个格子是 <code>S</code> 表示「碰撞」自己，当这个格子是 <code>F</code>表示吃食。</p><p><strong>好像少了撞墙？</strong><br>笔者在设计过程中，并没有把墙设计在舞台的矩阵中，而是通过索引出界的方式来表示撞墙。简单地说就是 <code>next === -1</code> 时表示出界和撞墙。</p><p>以下伪代码表示蛇的整上活动过程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B 表示撞墙</span></span><br><span class="line"><span class="keyword">let</span> cell = <span class="number">-1</span> === next ? B : zone[next]; </span><br><span class="line"><span class="keyword">switch</span>(cell) &#123;</span><br><span class="line"><span class="comment">// 吃食</span></span><br><span class="line"><span class="keyword">case</span> F: eat(); <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 撞到自己</span></span><br><span class="line"><span class="keyword">case</span> S: collision(S); <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 撞墙</span></span><br><span class="line"><span class="keyword">case</span> B: collision(B): <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line"><span class="keyword">default</span>: move; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="随机投食"><a href="#随机投食" class="headerlink" title="随机投食"></a>随机投食</h3><p>随机投食是指随机挑选舞台的一个索引值用于映射食物的位置。这似乎很简单，可以直接这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">food = <span class="built_in">Math</span>.random(zone.length) &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>如果考虑到投食的前提 —— 不与蛇身重叠，你会发现上面的随机代码并不能保证投食位置不与蛇身重叠。由于这个算法的安全性带有赌博性质，且把它称作「赌博算法」。为了保证投食的安全性，笔者把算法扩展了一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> index = <span class="built_in">Math</span>.random(zone.length) &gt;&gt; <span class="number">0</span>; </span><br><span class="line"><span class="comment">// 当前位置是否被占用</span></span><br><span class="line"><span class="keyword">return</span> zone[index] === S ? feed() : index; </span><br><span class="line">&#125;</span><br><span class="line">food = feed();</span><br></pre></td></tr></table></figure></p><p>上面的代码虽然在理论上可以保证投食的绝对安全，不过笔者把这个算法称作「不要命的赌徒算法」，因为上面的算法有致命的BUG —— 超长递归 or 死循环。</p><p>为了解决上面的致命问题，笔者设计了下面的算法来做随机投食：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 未被占用的空格数</span></span><br><span class="line"><span class="keyword">let</span> len = zone.length - snake.length; </span><br><span class="line"><span class="comment">// 无法投食</span></span><br><span class="line"><span class="keyword">if</span>(len === <span class="number">0</span>) <span class="keyword">return</span> ; </span><br><span class="line"><span class="comment">// zone的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>, </span><br><span class="line"><span class="comment">// 空格计数器</span></span><br><span class="line">count = <span class="number">0</span>, </span><br><span class="line"><span class="comment">// 第 rnd 个空格子是最终要投食的位置</span></span><br><span class="line">rnd = <span class="built_in">Math</span>.random() * count &gt;&gt; <span class="number">0</span> + <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 累计空格数</span></span><br><span class="line"><span class="keyword">while</span>(count !== rnd) &#123;</span><br><span class="line"><span class="comment">// 当前格子为空，count总数增一</span></span><br><span class="line">zone[index++] === <span class="number">0</span> &amp;&amp; ++count; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index - <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">food = feed();</span><br></pre></td></tr></table></figure></p><p>这个算法的平均复杂度为 O(n/2)。由于投食是一个低频操作，所以 O(n/2)的复杂度并不会带来任何性能问题。不过，笔者觉得这个算法的复杂度还是有点高了。回头看一下最开始的「赌博算法」，虽然「赌博算法」很不靠谱，但是它有一个优势 —— 时间复杂度为 O(1)。 </p><p>「赌博算法」的靠谱概率 = (zone.length - snake.length) / zone.length。<code>snake.length</code> 是一个动态值，它的变化范围是：<code>0 ~ zone.length</code>。推导出「赌博算法」的平均靠谱概率是：</p><blockquote><p><strong>「赌博算法」平均靠谱概率 = 50%</strong></p></blockquote><p>看来「赌博算法」还是可以利用一下的。于是笔者重新设计了一个算法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> rnd = <span class="built_in">Math</span>.random() * zone.length &gt;&gt; <span class="number">0</span>; </span><br><span class="line"><span class="keyword">return</span> zone[rnd] === <span class="number">0</span> ? rnd : <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">food = bet(); </span><br><span class="line"><span class="keyword">if</span>(food === <span class="number">-1</span>) food = feed();</span><br></pre></td></tr></table></figure></p><p>新算法的平均复杂度可以有效地降低到 O(n/4)，人生有时候需要点运气 : )。</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>在 View 可以根据喜好选择一款游戏渲染引擎，笔者在 View 层选择了 <code>PIXI</code> 作为游戏游戏渲染引擎。</p><p>View 的任务主要有两个：</p><ol><li>绘制游戏的界面；</li><li>渲染 Model 里的各种数据结构</li></ol><p>也就是说 View 是使用渲染引擎还原设计稿的过程。本文的目的是介绍「贪吃蛇」的实现思路，如何使用一个渲染引擎不是本文讨论的范畴，笔者想介绍的是：「如何提高渲染的效率」。</p><p>在 View 中显示 Model 的蛇可以简单地如以下伪代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空 View 上的蛇</span></span><br><span class="line">view.snake.clean(); </span><br><span class="line">model.snake.forEach(</span><br><span class="line">(node) =&gt; &#123;</span><br><span class="line"><span class="comment">// 创建 View 上的蛇节点</span></span><br><span class="line"><span class="keyword">let</span> viewNode = createViewNode(node); </span><br><span class="line"><span class="comment">// 并合一条新蛇</span></span><br><span class="line">view.snake.push(viewNode); </span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>上面代码的时间复杂度是 O(n)。上面介绍过蛇的移动是一个高频的活动，我们要尽量避免高频率地运行 O(n) 的代码。来分析蛇的三种活动：「移动」，「吃食」，「碰撞」。</p><p>首先，Model 发生了「碰撞」，View 应该是直接暂停渲染 Model 里的状态，游戏处在死亡状态，接下来的事由 Control 处理。</p><p>Model 中的蛇（链表）在一次「移动」过程中做了两件事：<strong>向表头插入一个新节点，同时剔除表尾一个旧节点</strong>；蛇（链表）在一次「吃食」过程中只做一件事：<strong>向表头插入一个新节点</strong>。</p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170923_before_after.png" alt="对比"> </p><p>如果在 View 中对 Model 的蛇链表做差异化检查，View 只增量更新差异部分的话，算法的时间复杂度即可降低至 O(1) ~ O(2) 。以下是优化后的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> snakeA = model.snake, snakeB = view.snake; </span><br><span class="line"><span class="comment">// 增量更新尾部</span></span><br><span class="line"><span class="keyword">while</span>(snakeB.length &lt;= snakeA.length) &#123; </span><br><span class="line">headA = snakeA.next(); </span><br><span class="line"><span class="comment">// 头节点匹配</span></span><br><span class="line"><span class="keyword">if</span>(headA.data === headB.data) <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 不匹配</span></span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line"><span class="comment">// 向snakeB插入头节点</span></span><br><span class="line"><span class="keyword">if</span>(snakeA.HEAD === headA.index) &#123;</span><br><span class="line">snakeB.unshift(headA.data); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向snakeB插入第二个节点</span></span><br><span class="line"><span class="keyword">else</span> snakeB.insertAfter(<span class="number">0</span>, headA.data); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增量更新头部 </span></span><br><span class="line"><span class="keyword">let</span> tailA = snakeA.last(), tailB; </span><br><span class="line"><span class="keyword">while</span>(snakeB.length !== <span class="number">0</span>) &#123; </span><br><span class="line">tailB = snakeB.last(); </span><br><span class="line"><span class="comment">// 尾节点匹配</span></span><br><span class="line"><span class="keyword">if</span>(tailA.data === tailB.data) <span class="keyword">break</span>; </span><br><span class="line"><span class="comment">// 不匹配</span></span><br><span class="line"><span class="keyword">else</span> snakeB.pop(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><p>Control 主要做 3 件事：</p><ol><li>游戏与用户的互动 </li><li>驱动 Model </li><li>同步 View 与 Model </li></ol><p>「游戏与用户的互动」是指向外提供游戏过程需要使用到的 APIs 与 各类事件。笔者规划的 APIs 如下：</p><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">type</th><th style="text-align:left">detail</th></tr></thead><tbody><tr><td style="text-align:left">init</td><td style="text-align:left">method</td><td style="text-align:left">初始化游戏</td></tr><tr><td style="text-align:left">start</td><td style="text-align:left">method</td><td style="text-align:left">开始游戏</td></tr><tr><td style="text-align:left">restart</td><td style="text-align:left">method</td><td style="text-align:left">重新开始游戏</td></tr><tr><td style="text-align:left">pause</td><td style="text-align:left">method</td><td style="text-align:left">暂停</td></tr><tr><td style="text-align:left">resume</td><td style="text-align:left">method</td><td style="text-align:left">恢复</td></tr><tr><td style="text-align:left">turn</td><td style="text-align:left">method</td><td style="text-align:left">控制蛇的转向。如：turn(“left”)</td></tr><tr><td style="text-align:left">destroy</td><td style="text-align:left">method</td><td style="text-align:left">销毁游戏</td></tr><tr><td style="text-align:left">speed</td><td style="text-align:left">property</td><td style="text-align:left">蛇的移动速度</td></tr></tbody></table><p>事件如下：</p><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">detail</th></tr></thead><tbody><tr><td style="text-align:left">countdown</td><td style="text-align:left">倒时计</td></tr><tr><td style="text-align:left">eat</td><td style="text-align:left">吃到食物</td></tr><tr><td style="text-align:left">before-eat</td><td style="text-align:left">吃到食物前触发</td></tr><tr><td style="text-align:left">gameover</td><td style="text-align:left">游戏结束</td></tr></tbody></table><p>事件统一挂载在游戏实例下的 <code>event</code> 对象下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snake.event.on(<span class="string">"countdown"</span>, (time) =&gt; <span class="built_in">console</span>.log(<span class="string">"剩余时间："</span>, time));</span><br></pre></td></tr></table></figure></p><p>「驱动 Model 」只做一件事 —— <strong>将 Model 的蛇的方向更新为用户指定的方向</strong>。<br>「同步 View 与 Model 」也比较简单，检查 Model 是否有更新，如果有更新通知 View 更新游戏界面。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文转载自：<a href="https://github.com/leeenx/snake" target="_blank" rel="noopener">https://github.com/leeenx/snake</a></p><p>下面是本文介绍的贪吃蛇的线上 <a href="https://leeenx.github.io/snake/src/snake.html" target="_blank" rel="noopener">DEMO</a> 的二维码： </p><p><img src="http://7xv39r.com1.z0.glb.clouddn.com/20170923_qr.png" alt="demo"> </p><p>游戏的源码托管在：<a href="https://github.com/leeenx/snake" target="_blank" rel="noopener">https://github.com/leeenx/snake</a></p><p>感谢耐心阅读完本文章的读者。本文仅代表笔者的个人观点，如有不妥之处请不吝赐教。</p>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用hexo和github搭建个人博客小站全攻略</title>
      <link href="/2018/08/20/%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%AB%99%E5%85%A8%E6%94%BB%E7%95%A5/"/>
      <url>/2018/08/20/%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%AB%99%E5%85%A8%E6%94%BB%E7%95%A5/</url>
      <content type="html"><![CDATA[<h1 id="如何用hexo与github搭建一个属于你自己的个人博客站点呢？"><a href="#如何用hexo与github搭建一个属于你自己的个人博客站点呢？" class="headerlink" title="如何用hexo与github搭建一个属于你自己的个人博客站点呢？"></a>如何用hexo与github搭建一个属于你自己的个人博客站点呢？</h1><hr><h2 id="一-了解hexo与github"><a href="#一-了解hexo与github" class="headerlink" title="一.了解hexo与github"></a>一.了解hexo与github</h2><h3 id="1-hexo是什么？"><a href="#1-hexo是什么？" class="headerlink" title="1.hexo是什么？"></a>1.hexo是什么？</h3><blockquote><p><strong><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a> 是一个快速、简洁且高效的博客框架。</strong>Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="2-github是什么？"><a href="#2-github是什么？" class="headerlink" title="2.github是什么？"></a>2.github是什么？</h3><blockquote><ul><li>1.<strong>gitHub是一个面向开源及私有软件项目的托管平台</strong>，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</li><li>2.一个<strong>博客网站</strong>建立好之后，想让所有人去访问，必须要有<strong>服务器和域名</strong>，仅仅在你的电脑上运行是远远不够的，而服务器和域名需要购买和备案(国内)，这其中要不但要花钱还要花时间去备案，所以对于一个博客站点来说，这些代价无疑是巨大的。</li><li>3.<strong>github是免费的</strong>，可以把你写好的博客网站托管在github上边，通过<strong>Github Pages</strong>实现个人网站。</li><li>4.<strong>Github Pages是Github免费提供给开发者的一款托管个人网站的产品</strong>，它可以免费提供一个域名<code>username.github.io</code>去访问你的博客网站，而<code>username</code>就是你在注册github的用户名，至于更详细的内容请接着往下看。</li><li>5.我的小站：<a href="https://pengqiangsheng.github.io" target="_blank" rel="noopener">pengqiangsheng.github.io</a></li></ul></blockquote><h3 id="3-如何安装？"><a href="#3-如何安装？" class="headerlink" title="3.如何安装？"></a>3.如何安装？</h3><blockquote><p>安装hexo前，首先检查你的电脑是否安装下列应用程序：<br>1.<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br>2.<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a><br>安装Node.js和Git之后我们可以运行使用<kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，然后输入<code>cmd</code>进入命令提示符：<br><code>$ node --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/1.png" alt=""><br>如果看到上述内容说明Node.js已经安装成功了<br><code>$ git --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/2.png" alt=""><br>如果看到上述内容说明git已经安装成功了<br>如果出现提示“不是内部或外部命令…”请看第5点的注意事项</p></blockquote><h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h3><blockquote><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo<br><code>$ npm install -g hexo-cli</code><br>等待安装完成后<br><code>$ hexo --version</code><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/3.png" alt=""><br>看到这些信息说明hexo安装完成</p></blockquote><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><blockquote><p>1.如果出现提示“node不是内部或外部命令，也不是可运行的程序或批处理文件”此类的提示可能有两个原因</p></blockquote><blockquote><ul><li>环境变量<br> 百度“xxx环境变量如何添加”</li><li>管理员权限的命令提示符<br> 如果环境变量添加完成后还是不行，请运行管理员权限的命令提示符</li></ul></blockquote><blockquote><p>2.关于想Node.js与Git的更深入的了解的小伙伴可以自行百度</p></blockquote><h2 id="二-Hexo建站"><a href="#二-Hexo建站" class="headerlink" title="二.Hexo建站"></a>二.Hexo建站</h2><h3 id="1-在你电脑的一个你熟悉的位置新建一个文件夹hexo"><a href="#1-在你电脑的一个你熟悉的位置新建一个文件夹hexo" class="headerlink" title="1.在你电脑的一个你熟悉的位置新建一个文件夹hexo"></a>1.在你电脑的一个你熟悉的位置新建一个文件夹hexo</h3><blockquote><p><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/4.png" alt=""></p></blockquote><h3 id="2-在命令提示符中进入这个文件夹后执行hexo-init"><a href="#2-在命令提示符中进入这个文件夹后执行hexo-init" class="headerlink" title="2.在命令提示符中进入这个文件夹后执行hexo init"></a>2.在命令提示符中进入这个文件夹后执行hexo init</h3><blockquote><p><code>$ hexo init</code>耐心等待一小会时间<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-1.png" alt=""><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-2.png" alt=""><br>如果看到以上信息说明hexo init成功了，接着打开刚刚创建的文件夹，可以看到这样的目录结构：<br>hexo<br>|–node_modules<br>|–scaffolds<br>|–source(存放文章)<br>|–themes(主题)<br>|—-.gitignore<br>|—-config.yml(站点配置文件)<br>|—-db.json<br>|—-package.json<br>|—-package-lock.json<br>这里对hexo目录就不进行太多的讲解<br>需要详细了解的朋友，请转到: <strong><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档|hexo</a></strong><br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-3.png" alt=""></p></blockquote><h3 id="3-部署你的博客网站到本地进行预览"><a href="#3-部署你的博客网站到本地进行预览" class="headerlink" title="3.部署你的博客网站到本地进行预览"></a>3.部署你的博客网站到本地进行预览</h3><blockquote><p>按照顺序三步走</p></blockquote><blockquote><ul><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>$ hexo clean</code></li><li>生成静态页面至public目录<br><code>$ hexo generate</code></li><li>开启预览访问端口（默认端口4000，’ctrl + c’关闭server)<br><code>$ hexo server</code></li></ul></blockquote><h3 id="4-打开浏览器"><a href="#4-打开浏览器" class="headerlink" title="4.打开浏览器"></a>4.打开浏览器</h3><blockquote><p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>访问后，应该可以看到如下页面，说明你的博客小站搭建成功了！<br>这个页面的主题是hexo官方自带主题landscape<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-4.png" alt=""></p></blockquote><h3 id="5-主题配置"><a href="#5-主题配置" class="headerlink" title="5.主题配置"></a>5.主题配置</h3><blockquote><p>这里呢，我推荐使用<strong><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a></strong></p></blockquote><blockquote><ul><li>进入hexo根目录<br><code>$ cd your-hexo-site</code></li><li>使用git clone下载Next主题到thems文件夹下<br><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li></ul></blockquote><blockquote><p>等待下载完成后可以在hexo/themes文件夹下看到：<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/next.png" alt=""><br>打开hexo根目录下的config.yml文件<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/hexo-config.png" alt=""><br>找到字段<code>theme: landscape</code><br>把<code>landscape</code>换成<code>next</code>，然后保存<br>接着按照部署到本地的方法执行这三步<br><code>$ hexo clean</code><br><code>$ hexo generate</code><br><code>$ hexo server</code><br>然后打开你的浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>你会神奇的发现主题已经换成next的简约风格<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/5-6.png" alt=""></p></blockquote><h3 id="6-更多关于Next主题的内容"><a href="#6-更多关于Next主题的内容" class="headerlink" title="6.更多关于Next主题的内容"></a>6.更多关于Next主题的内容</h3><blockquote><p>请访问：<strong><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></strong></p></blockquote><h2 id="三-在Github上托管hexo博客"><a href="#三-在Github上托管hexo博客" class="headerlink" title="三.在Github上托管hexo博客"></a>三.在Github上托管hexo博客</h2><h3 id="1-注册github账号"><a href="#1-注册github账号" class="headerlink" title="1.注册github账号"></a>1.注册github账号</h3><blockquote><p>访问<a href="https://github.com/" target="_blank" rel="noopener">github</a><br>输入账号，邮箱，密码进行注册<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-1.png" alt=""></p></blockquote><h3 id="2-新建一个项目"><a href="#2-新建一个项目" class="headerlink" title="2.新建一个项目"></a>2.新建一个项目</h3><blockquote><p><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-2.png" alt=""></p></blockquote><h3 id="3-配置项目信息"><a href="#3-配置项目信息" class="headerlink" title="3.配置项目信息"></a>3.配置项目信息</h3><blockquote><p>注意项目名字格式必须是:<code>username.github.io</code><br><code>username</code>就是你注册时的用户名<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-5.png" alt=""></p></blockquote><h3 id="4-创建好之后来到项目页面"><a href="#4-创建好之后来到项目页面" class="headerlink" title="4.创建好之后来到项目页面"></a>4.创建好之后来到项目页面</h3><blockquote><p>复制一下https的项目地址<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-6.png" alt=""></p></blockquote><h3 id="5-上传本地hexo博客项目到github上"><a href="#5-上传本地hexo博客项目到github上" class="headerlink" title="5.上传本地hexo博客项目到github上"></a>5.上传本地hexo博客项目到github上</h3><blockquote><p>有两种方式，一种是https传输，另一种是ssh秘钥传输</p></blockquote><blockquote><ul><li>https传输<br>这种方式流程较为简单，但每次上传代码都需要输入github账号和密码</li><li>ssh秘钥传输<br>这种方式配置流程比较复杂，但配置完成后上传代码更为便捷</li></ul></blockquote><h4 id="5-1-https方式上传代码"><a href="#5-1-https方式上传代码" class="headerlink" title="5.1 https方式上传代码"></a>5.1 https方式上传代码</h4><blockquote><p>打开hexo根目录下的config.yml文件<br>找到<code>deploy:</code>字段，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Johnlly/johnlly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>repo后填的参数就是你的项目地址，然后保存<br>打开命令提示符进入hexo目录<br><code>$ hexo deploy</code>既可把本地代码上传至github<br>如果出现ERROR Deployer not found: git<br>请先执行<code>npm install --save hexo-deployer-git</code><br>然后再<code>$ hexo deploy</code><br>执行过程中会让你输入github的账号和密码<br>账号密码验证成功后提示以下信息说明上传代码成功<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-7.png" alt=""></p></blockquote><h4 id="5-2-ssh秘钥传输"><a href="#5-2-ssh秘钥传输" class="headerlink" title="5.2 ssh秘钥传输"></a>5.2 ssh秘钥传输</h4><h5 id="5-2-1-检查本机现有的ssh秘钥"><a href="#5-2-1-检查本机现有的ssh秘钥" class="headerlink" title="5.2.1 检查本机现有的ssh秘钥"></a>5.2.1 检查本机现有的ssh秘钥</h5><blockquote><p>输入以下两条命令查看你是否有名为id_rsa和id_dsa.pub的2个文件<br>如果没有转到步骤2，否则请跳到第3步<br><code>$ cd ~/.ssh</code><br><code>$ ls</code></p></blockquote><h5 id="5-2-2-创建一个新的ssh秘钥"><a href="#5-2-2-创建一个新的ssh秘钥" class="headerlink" title="5.2.2 创建一个新的ssh秘钥"></a>5.2.2 创建一个新的ssh秘钥</h5><blockquote><p><code>$ ssh-keygen -t rsa -C &quot;注册Github用的邮箱&quot;</code><br>输入命令后遇到需要你输入的时候，请按回车键，一共三次回车。<br>现在你已经生成了一个ssh秘钥了</p></blockquote><h5 id="5-2-3-将你的SSH-key添加到GitHub-或者别的托管平台"><a href="#5-2-3-将你的SSH-key添加到GitHub-或者别的托管平台" class="headerlink" title="5.2.3 将你的SSH key添加到GitHub(或者别的托管平台)"></a>5.2.3 将你的SSH key添加到GitHub(或者别的托管平台)</h5><blockquote><p><code>$ clip &lt; ~/.ssh/id_rsa.pub</code><br>运行这条命令可以将秘钥的内容复制到剪切板<br>然后打开github，添加ssh秘钥<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-10.png" alt=""></p></blockquote><h5 id="5-2-4-测试ssh秘钥是否成功添加到GitHub"><a href="#5-2-4-测试ssh秘钥是否成功添加到GitHub" class="headerlink" title="5.2.4 测试ssh秘钥是否成功添加到GitHub"></a>5.2.4 测试ssh秘钥是否成功添加到GitHub</h5><blockquote><p><code>$ ssh -T git@github.com</code>注意就是运行此命令<br>执行过程中会有如下提示，选择yes即可<br>Are you sure you want to continue connecting (yes/no)? <strong>yes</strong><br>你会看到如下有关成功的标志<br>You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h5 id="5-2-5-用ssh方式上传代码至GitHub"><a href="#5-2-5-用ssh方式上传代码至GitHub" class="headerlink" title="5.2.5 用ssh方式上传代码至GitHub"></a>5.2.5 用ssh方式上传代码至GitHub</h5><blockquote><p>打开hexo根目录下的config.yml文件<br>找到<code>deploy:</code>字段，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:johnlly/johnlly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>打开命令提示符进入hexo目录<br>执行<code>$ hexo deploy</code>即可上传</p></blockquote><h4 id="5-3-打开你的github项目页面"><a href="#5-3-打开你的github项目页面" class="headerlink" title="5.3 打开你的github项目页面"></a>5.3 打开你的github项目页面</h4><blockquote><p>看到如下信息,你的博客代码已经成功的托管在github上了<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-8.png" alt=""></p></blockquote><h4 id="5-4-打开浏览器"><a href="#5-4-打开浏览器" class="headerlink" title="5.4 打开浏览器"></a>5.4 打开浏览器</h4><blockquote><p>输入<code>username.github.io</code>，<code>username</code>就是你的github用户名<br>例如我的<a href="https://johnlly.github.io/" target="_blank" rel="noopener">https://johnlly.github.io/</a>可以访问到页面<br>至此就大功告成了，剩下的就是主题的配置和文章的撰写了<br><img src="/2018/08/20/用hexo和github搭建个人博客小站全攻略/6-9.png" alt=""></p></blockquote><h4 id="后续更新…"><a href="#后续更新…" class="headerlink" title="后续更新…"></a>后续更新…</h4>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo生成博文插入图片的办法</title>
      <link href="/2018/08/17/hexo%E7%94%9F%E6%88%90%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/08/17/hexo%E7%94%9F%E6%88%90%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="hexo生成博文插入图片的办法"><a href="#hexo生成博文插入图片的办法" class="headerlink" title="hexo生成博文插入图片的办法"></a>hexo生成博文插入图片的办法</h1><hr><h2 id="一-首先进入Hexo"><a href="#一-首先进入Hexo" class="headerlink" title="一.首先进入Hexo"></a>一.首先进入Hexo</h2><h3 id="1-把主页配置文件-config-yml-里的post-asset-folder这个选项设置为true"><a href="#1-把主页配置文件-config-yml-里的post-asset-folder这个选项设置为true" class="headerlink" title="1.把主页配置文件_config.yml 里的post_asset_folder这个选项设置为true"></a>1.把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder</code>这个选项设置为<code>true</code></h3><h3 id="2-在你的hexo目录下执行命令"><a href="#2-在你的hexo目录下执行命令" class="headerlink" title="2.在你的hexo目录下执行命令"></a>2.在你的hexo目录下执行命令</h3><blockquote><p><code>$ npm install hexo-asset-image--save</code><br>这是下载安装一个可以上传本地图片的插件，来自<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">CodeFalling</a></p></blockquote><h3 id="3-等待安装完成后"><a href="#3-等待安装完成后" class="headerlink" title="3.等待安装完成后"></a>3.等待安装完成后</h3><blockquote><p>再运行<code>$ hexo new &quot;xxx&quot;</code>来生成md博文时<br>可以看到/source/posts文件夹内除了xxx.md文件还有一个同名的文件夹</p></blockquote><h3 id="4-最后在xxx-md博文中想引入图片时"><a href="#4-最后在xxx-md博文中想引入图片时" class="headerlink" title="4.最后在xxx.md博文中想引入图片时"></a>4.最后在xxx.md博文中想引入图片时</h3><blockquote><p>先把图片复制到xxx这个文件夹中<br>然后只需要在xxx.md中按照markdown的格式引入图片<br><code>![你想输入的替代文字](xxx/图片名.jpg)</code></p></blockquote><h2 id="二-注意事项"><a href="#二-注意事项" class="headerlink" title="二.注意事项"></a>二.注意事项</h2><h3 id="1-路径问题"><a href="#1-路径问题" class="headerlink" title="1.路径问题"></a>1.路径问题</h3><blockquote><p>注意： xxx是这个md文件的名字，也是同名文件夹的名字<br>只需要有文件夹名字即可，不需要有什么绝对路径<br>你想引入的图片就只需要放入xxx这个文件夹内就好了，很像引用相对路径</p></blockquote><h3 id="2-打开Chrome控制台查看图片真正的路径"><a href="#2-打开Chrome控制台查看图片真正的路径" class="headerlink" title="2.打开Chrome控制台查看图片真正的路径"></a>2.打开Chrome控制台查看图片真正的路径</h3><blockquote><p>最后检查一下，<code>$ hexo g</code>生成页面后<br>进入public\2018\08\17\index.html文件中查看相关字段<br>可以发现html标签内的语句是<code>&lt;img src=&quot;2018/08/17/xxx/图片名.jpg&quot;&gt;</code><br>而不是<code>&lt;img src=&quot;xxx/图片名.jpg&gt;</code><br>这很重要,关乎你的网页是否可以真正加载你想插入的图片</p></blockquote>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github更新项目</title>
      <link href="/2018/08/17/github%E6%9B%B4%E6%96%B0%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/08/17/github%E6%9B%B4%E6%96%B0%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="更新github上的项目"><a href="#更新github上的项目" class="headerlink" title="更新github上的项目"></a>更新github上的项目</h1><hr><h2 id="一-克隆代码"><a href="#一-克隆代码" class="headerlink" title="一.克隆代码"></a>一.克隆代码</h2><h3 id="准备工作：1-git客户端-2-github账户"><a href="#准备工作：1-git客户端-2-github账户" class="headerlink" title="准备工作：1.git客户端 2.github账户"></a>准备工作：1.<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git客户端</a> 2.<a href="https://github.com" target="_blank" rel="noopener">github账户</a></h3><h3 id="1-在本地建立一个文件夹，在此处点击右键，选择git-bash-here"><a href="#1-在本地建立一个文件夹，在此处点击右键，选择git-bash-here" class="headerlink" title="1.在本地建立一个文件夹，在此处点击右键，选择git bash here"></a>1.在本地建立一个文件夹，在此处点击右键，选择git bash here</h3><ul><li>进入此文件夹<br><img src="/2018/08/17/github更新项目/1.png" alt=""></li><li>右键选择git bash<br><img src="/2018/08/17/github更新项目/2.png" alt=""></li></ul><h3 id="2-把自己的代码clone到本地，或者clone别人的到本地"><a href="#2-把自己的代码clone到本地，或者clone别人的到本地" class="headerlink" title="2.把自己的代码clone到本地，或者clone别人的到本地"></a>2.把自己的代码clone到本地，或者clone别人的到本地</h3><blockquote><p><code>$ git clone https://github.com/xxx</code><br><img src="/2018/08/17/github更新项目/3.png" alt=""></p></blockquote><h3 id="3-clone完成后查看本地代码"><a href="#3-clone完成后查看本地代码" class="headerlink" title="3.clone完成后查看本地代码"></a>3.clone完成后查看本地代码</h3><p><img src="/2018/08/17/github更新项目/4.png" alt=""></p><h2 id="二-更新代码"><a href="#二-更新代码" class="headerlink" title="二.更新代码"></a>二.更新代码</h2><h3 id="1-新增一个mytest的文件夹，里面有一个my-txt"><a href="#1-新增一个mytest的文件夹，里面有一个my-txt" class="headerlink" title="1.新增一个mytest的文件夹，里面有一个my.txt"></a>1.新增一个mytest的文件夹，里面有一个my.txt</h3><ul><li>新建文件夹 <code>$ mkdir mytest</code><br><img src="/2018/08/17/github更新项目/5.png" alt=""></li><li>创建my.txt <code>$ touch my.txt</code><br><img src="/2018/08/17/github更新项目/6.png" alt=""></li></ul><h3 id="2-使用git-status命令查看状态"><a href="#2-使用git-status命令查看状态" class="headerlink" title="2.使用git status命令查看状态"></a>2.使用git status命令查看状态</h3><h4 id="查看当前git仓库状态，发现有新的文件"><a href="#查看当前git仓库状态，发现有新的文件" class="headerlink" title="查看当前git仓库状态，发现有新的文件"></a>查看当前git仓库状态，发现有新的文件</h4><blockquote><p><code>git status</code><br><img src="/2018/08/17/github更新项目/7.png" alt=""></p></blockquote><h2 id="三-更新代码"><a href="#三-更新代码" class="headerlink" title="三.更新代码"></a>三.更新代码</h2><h3 id="1-使用git-add命令"><a href="#1-使用git-add命令" class="headerlink" title="1.使用git add命令"></a>1.使用git add命令</h3><blockquote><p><code>$ git add *</code> –代表更新全部</p></blockquote><h3 id="2-使用git-commit-m-“更新说明”-commit只是提交到缓存区域"><a href="#2-使用git-commit-m-“更新说明”-commit只是提交到缓存区域" class="headerlink" title="2.使用git commit -m “更新说明”,commit只是提交到缓存区域"></a>2.使用git commit -m “更新说明”,commit只是提交到缓存区域</h3><blockquote><p><code>$ git commit -m &quot;更新说明&quot;</code><br><img src="/2018/08/17/github更新项目/8.png" alt=""></p></blockquote><h3 id="3-如果多人同时开发维护代码，得先git-pull-拉取当前分支最新代码"><a href="#3-如果多人同时开发维护代码，得先git-pull-拉取当前分支最新代码" class="headerlink" title="3.如果多人同时开发维护代码，得先git pull,拉取当前分支最新代码"></a>3.如果多人同时开发维护代码，得先git pull,拉取当前分支最新代码</h3><blockquote><p><code>$ git pull</code><br><img src="/2018/08/17/github更新项目/9.png" alt=""></p></blockquote><h3 id="4-最后git-push-origin-master-最后一步才是push到远程master分支上"><a href="#4-最后git-push-origin-master-最后一步才是push到远程master分支上" class="headerlink" title="4.最后git push origin master,最后一步才是push到远程master分支上"></a>4.最后git push origin master,最后一步才是push到远程master分支上</h3><blockquote><p><code>$git push origin master</code><br><img src="/2018/08/17/github更新项目/10.png" alt=""></p></blockquote><h3 id="5-打开github界面查看到更新状态"><a href="#5-打开github界面查看到更新状态" class="headerlink" title="5.打开github界面查看到更新状态"></a>5.打开github界面查看到更新状态</h3><p><img src="/2018/08/17/github更新项目/11.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
